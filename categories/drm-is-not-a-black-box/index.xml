<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DRM is not a black box | Sander Saares</title>
    <link>/categories/drm-is-not-a-black-box/</link>
      <atom:link href="/categories/drm-is-not-a-black-box/index.xml" rel="self" type="application/rss+xml" />
    <description>DRM is not a black box</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Sander Saares 2020</copyright><lastBuildDate>Fri, 22 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>DRM is not a black box</title>
      <link>/categories/drm-is-not-a-black-box/</link>
    </image>
    
    <item>
      <title>DRM is not a black box, part 4: key management</title>
      <link>/post/drm-is-not-a-black-box-04/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/drm-is-not-a-black-box-04/</guid>
      <description>&lt;p&gt;Historical key managament approaches leave it all in the care of the DRM vendor, leading to major lock-in and maintenance headaches that can require solution re-architecting when DRM vendors are changed or added. A modern solution architecture separates key management from DRM and enables flexible integration of solution components from different vendors.&lt;/p&gt;
&lt;p&gt;The following important interactions take place in the key management domain:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The content processing pipeline needs access to keys in order to encrypt media samples.&lt;/li&gt;
&lt;li&gt;The DRM server needs access to keys in order to embed them into licenses that are delivered to DRM clients.&lt;/li&gt;
&lt;li&gt;Authorization decisions must be informed by which keys are assocaited with which movies (and even which particular track).&lt;/li&gt;
&lt;li&gt;Usage of keys is constrained by policy configuration.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Key management practices and protocols are minimally standardized in the industry and large sections of the workflows remain implementation-specific. This article presents the key management architecture that the author believes provides the best capabilities in terms of flexible features and cross-vendor interoperability, though it is certainly not the only architecture in active use.&lt;/p&gt;
&lt;p&gt;Keys are the technical mechanism that allows many parts of content usage policy to be associated with encrypted movie data. Therefore, a discussion of key management must by necessity also cover policy management. The two topics are presented here together.&lt;/p&gt;
&lt;h1 id=&#34;kid-is-in-the-focus&#34;&gt;KID is in the focus&lt;/h1&gt;
&lt;p&gt;Each key is identified by a unique KID (aka key ID). Keys are also logically associated with content, as each movie uses one or more keys (e.g. the SD video key, the HD video key and the audio key). Keys are not shared by different movies, though sometimes shared by several tracks of the same movie.&lt;/p&gt;
&lt;p&gt;Different components involved in DRM workflows work either with the KIDs that identify individual keys or the content ID that identifies a movie, rarely both. When designing the solution architecture, it is important to understand where each type of identifier is appropriate. Needless mixing of different identifiers can lead to architectural creep and mixing of domain specific concepts that complicates future evolution of a solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keep any content ID or &amp;ldquo;movie&amp;rdquo; concept out of DRM interactions&lt;/strong&gt;. DRM is about keys and the policy that applies to the keys, so focus the domain language on keys and policy, with data sets associated by the KIDs.&lt;/p&gt;
&lt;h1 id=&#34;flow-of-policy&#34;&gt;Flow of policy&lt;/h1&gt;
&lt;p&gt;To determine the policy to apply to a key, there must exist some link between the key and the relevant policy. The policy that governs use of a key is associated with a specific movie.&lt;/p&gt;
&lt;p&gt;Content providers typically define policy based on classes of content, with the policy being different for each content provider. A simplified example might be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For library content (old content already released on DVD)
&lt;ul&gt;
&lt;li&gt;Same key may be used for all tracks.&lt;/li&gt;
&lt;li&gt;Any production-grade DRM client robustness level is acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For early window content (still in cinemas)
&lt;ul&gt;
&lt;li&gt;Separate key must be used for HD tracks.&lt;/li&gt;
&lt;li&gt;Only high-robustness DRM clients are acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An operator configures all the necessary policies in the CMS database for each content provider.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-policies-are-defined-based-on-contracts-with-content-providers&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/define-policy-by-class_hu208c02fd1327f7c83f529a405c0da2d2_12310_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;711&#34; height=&#34;100&#34;&gt;



  
  
  &lt;figcaption&gt;
    Policies are defined based on contracts with content providers.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;When a movie is submitted for ingest, it must be linked to the appropriate policy configuration. Based on the associated policy, the CMS needs to determine the key structure to use. The key and track associations are saved to the CMS database so that they can later be referenced to resolve the policy that applies to a specific key.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-links-between-keys-and-content-are-created-at-ingest-time&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/keys-vs-content-at-packagetime_hu7c3c9c499ffd4133cc4c8d9da985757a_33051_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;609&#34; height=&#34;451&#34;&gt;



  
  
  &lt;figcaption&gt;
    The links between keys and content are created at ingest time.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The policy to apply to a movie may change over time. Typically this is in the form of more relaxed constraints (e.g. when the content is no longer considered early window). Migrating content to use less strict policy is a simple database update that does not require re-processing of the content. Policy updates are published together with content catalog updates and take effect for any new playback authorizations granted by the authorization service.&lt;/p&gt;
&lt;p&gt;The key-specific policy is assembled when publishing policy from the CMS database, combining the information on what keys are used by a movie with the content provider&amp;rsquo;s policy that applies to that movie, specialized for each key and enhanced by solution-specific business logic (e.g. rules like &amp;ldquo;must have &amp;lsquo;HD&amp;rsquo; subscription to authorize use of HD key&amp;rdquo;).&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-when-catalog-updates-are-published-policy-updates-are-likewise-published-for-any-affected-keys&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/keys-vs-content-at-publishtime_hu1ef9c5a2c77d3b67de59f433651e5299_29078_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;574&#34; height=&#34;419&#34;&gt;



  
  
  &lt;figcaption&gt;
    When catalog updates are published, policy updates are likewise published for any affected keys.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;One effect of this workflow is that only the CMS needs to know which movie uses which keys - any DRM specific data sets published by the CMS directly reference individual keys and the policy associated with those keys.&lt;/p&gt;
&lt;p&gt;When playback authorization is requested by an app, the authorization service inspects the policy of the requested keys and makes an individual decision for each key. The policy also supplies constraints that must be enforced by the DRM client. The configuration for these constraints is embedded into the authorization token, from which the DRM server transfers it to the generated license.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-drm-interactions-at-time-of-playback-operate-on-keys-which-are-linked-to-published-policy-data&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/keys-vs-content-at-playtime_hu8280e132107ab085e14ac72ca86834ee_41758_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;709&#34; height=&#34;589&#34;&gt;



  
  
  &lt;figcaption&gt;
    DRM interactions at time of playback operate on keys which are linked to published policy data.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The authorization token contains not only the proof of authorization but also the policy configuration that applies to each specific key. &lt;strong&gt;The main role of the DRM server is to translate part of the key usage policy into the constraints language of a specific DRM technology&lt;/strong&gt;. Until the workflow reaches the DRM server, the policy enforcement logic is not tied to a specific DRM technology.&lt;/p&gt;
&lt;h1 id=&#34;creating-and-supplying-keys&#34;&gt;Creating and supplying keys&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;key server&lt;/strong&gt; is a database of keys and a set of APIs that can be used to access the keys. When keys are required by a component in the DRM workflows, they either request them from the key server or consume a key package previously exported from the key server.&lt;/p&gt;
&lt;p&gt;CPIX&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is the modern data format for key exchange. It defines a key package format that enables authenticated and confidential key delivery across the DRM ecosystem.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    While CPIX defines a standard data format for the key package, the protocols and APIs that use CPIX remain proprietary at present, without a generally accepted standard. Often, entirely different key import/export APIs are used for integration with different 3rd party systems. In solution architectures with legacy components, many of these will not even be based on CPIX.
  &lt;/div&gt;
&lt;/div&gt;





  
  











&lt;figure id=&#34;figure-cpix-documents-are-used-to-transfer-keys-between-components&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/key-movements-with-cpix_hu355db016463e9f911255c020b9f3770b_17735_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;486&#34; height=&#34;280&#34;&gt;



  
  
  &lt;figcaption&gt;
    CPIX documents are used to transfer keys between components.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The key server creates and stores new keys on demand. Once created, they may be exported for use by other services. This is typically done by the CMS, which passes the exported key packages on to other components during DRM workflow execution.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Some content packagers use a pull model where they directly access the key server to request keys. While potentially simpler to implement, this offers less architectural flexibility and removes a security boundary that may be important for defense in depth.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;It is important to keep the funcionality of the key server simple and constrained, as it is a highly security-sensitive component that has full access to the keys&lt;/strong&gt;. All duties that do not require access to keys should be moved out of the key server and into the CMS (which does not have access to keys).&lt;/p&gt;
&lt;p&gt;The key server knows nothing about movies or whether a key is to be used for audio or video. Only very basic relations exist in the key server, largely for the purpose of supporting certain live streaming scenarios.&lt;/p&gt;
&lt;h1 id=&#34;securing-keys-in-transit&#34;&gt;Securing keys in transit&lt;/h1&gt;
&lt;p&gt;Keys exported from the key server are asymmetrically encrypted to ensure that only the intended final recipient (i.e. the content packager or DRM server) can unlock the key package.&lt;/p&gt;
&lt;p&gt;It is common for the CMS requesting the key package to be unable to access the keys within because it is only an intermediary that coordinates the workflows and applies policy decisions. That is, the rights &amp;ldquo;can create and export keys&amp;rdquo; and &amp;ldquo;can decrypt keys&amp;rdquo; do not necessarily overlap among solution components.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The CPIX security mechanisms depend on implementation capabilities of the components using CPIX. Not every key server or packager in common use is capable of using encryption to secure keys transferred in CPIX documents. Verify the security capabilities of any products you plan to integrate into a solution.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A public key infrastructure must be in place for the access control mechanisms built into the CPIX document format to be usable.&lt;/p&gt;
&lt;h1 id=&#34;encrypting-media-samples&#34;&gt;Encrypting media samples&lt;/h1&gt;
&lt;p&gt;The key server can export a set of keys but that is not enough to encrypt media samples. There must also be a mapping of which keys to use for what type of content. The typical rule is &amp;ldquo;use a different key for SD video, HD video, UHD video and audio&amp;rdquo; but content provider policies can add additional complexity to this logic. This mapping can be described by the CPIX document format using simple rules such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This key is to be used for video tracks.&lt;/li&gt;
&lt;li&gt;This key is to be used for above 480p and up to 1080p resolution (HD).&lt;/li&gt;
&lt;li&gt;This key is to be used for 5.1 channel audio tracks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowledge of what key is mapped to what tracks does not belong in the key server, however. This is the domain of the business logic, policy enforcement and workflow orchestration mechanisms in a solution typically embodied in the CMS. It knows which content provider a movie is from and knows the policies of that content provider. The CMS often also coordinates the activities of different solution components, giving them jobs and configuration. Therefore, it is the duty of the CMS to take a CPIX document exported from the key server and extend it with policy-based data.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-cms-extends-the-cpix-document-with-key-usage-rules-when-creating-content-processing-jobs&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/policy-in-cpix_hu2e999042c7abcae1b382521c90b83e58_21126_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;432&#34; height=&#34;357&#34;&gt;



  
  
  &lt;figcaption&gt;
    The CMS extends the CPIX document with key usage rules when creating content processing jobs.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;For more details on how the acquired keys are used to encrypt content, refer back to 
&lt;a href=&#34;../drm-is-not-a-black-box-02/&#34;&gt;the article on content processing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Encryption interactions can be further complicated in live streaming scenarios where the keys and DRM metadata can change over time. This is explored in detail in the next article.&lt;/p&gt;
&lt;h1 id=&#34;providing-keys-to-drm-clients&#34;&gt;Providing keys to DRM clients&lt;/h1&gt;
&lt;p&gt;As described in 
&lt;a href=&#34;../drm-is-not-a-black-box-03&#34;&gt;the article on secure playback&lt;/a&gt;, DRM clients request keys from DRM servers. Before that can happen, the key management workflows in a solution must deliver the keys to the one or more DRM servers.&lt;/p&gt;
&lt;p&gt;A large solution may involve using multiple DRM servers from different vendors in parallel, for various legacy/contractual/policy/availability reasons. There is no universal architecture that can be assumed, beyond the need to be flexible.&lt;/p&gt;
&lt;p&gt;DRM servers from some vendors require all keys to be inserted into a DRM server specific key database before the DRM server will use the keys in licenses. Indeed, there may be a separate DRM server database for each DRM server used in a solution.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-some-drm-servers-require-all-keys-to-be-individually-imported-before-use&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/import-to-keyservers_hua3ba3911ce2ba860067eb561246249ec_12138_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;488&#34; height=&#34;181&#34;&gt;



  
  
  &lt;figcaption&gt;
    Some DRM servers require all keys to be individually imported before use.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The mechanisms for providing keys to DRM servers are not standardized, although the CPIX protocol is designed to facilitate this exchange. Still, it is only a data format and does not define an API, so a proprietary mechanism must be used with each involved DRM server to invoke the import.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Many previous-generation DRM servers assume that they are in control of key management and generation. This is not compatible with modern practices but remains a common cause of architectural complexity and integration headaches.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Not every DRM server requires the keys to be imported in advance (or at all). A more flexible architecture is to provide the keys to the DRM server as part of the license request sent by a player. This architecture uses the player as an intermediary to carry (encrypted) keys to a license server. Typically, the keys are requested on-demand and cached by the authorization service that resolves business logic and policy constraints when a player requests playback authorization.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Caching the keys by the authorization service reduces needless interactions with the key server and improves service availability by allowing authorization tokens to be granted even during key server downtime (if required keys are cached).
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that the authorization service only ever sees keys in encrypted form. Only the DRM server holds the private key required to decrypt the movie keys.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-some-drm-servers-can-accept-keys-embedded-into-authorization-tokens&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/attach-key-to-token_hude8a59985974405ef5e7e09f702f07b0_27229_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;714&#34; height=&#34;450&#34;&gt;



  
  
  &lt;figcaption&gt;
    Some DRM servers can accept keys embedded into authorization tokens.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;By providing the keys together with the license request, the role of the DRM server is largely reduced to translating the policy attached to business logic authorization decisions into a DRM technology specific policy language. This enables the DRM server to be largely stateless, greatly reducing its complexity. As DRM servers often must be developed using idiosyncratic DRM technology SDKs, any simplification in the structure of and reduction in the role of DRM servers greatly improves solution maintainability. &lt;strong&gt;Prefer stateless workflows that use token-embedded keys instead of importing keys into a DRM server&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Standardized key export protocols like CPIX are imperfectly suitable for the embedded key architecture because CPIX documents are relatively large. This is a problem because authorization tokens are typically embedded into (size-limited) HTTP request headers. For this reason, a custom size-optimized data format is typically used for stateless DRM server workflows that use embedded keys.&lt;/p&gt;
&lt;h1 id=&#34;changing-keys-in-live-streams&#34;&gt;Changing keys in live streams&lt;/h1&gt;
&lt;p&gt;It is typical to change the keys in live streams on a regular interval. The purpose of this is to force re-authorization of the viewer&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;: a new key requires a new authorization token and license, which enables the solution components to ensure that the viewer still has a valid subscription for the content. A typical interval is 24 hours between key changes.&lt;/p&gt;
&lt;p&gt;An alternative approach is to simply make the licenses (and authorization tokens) expire on an equivalent interval. While this can provide a roughly similar experience, there are many legacy DRM clients still deployed that do not possess a tamper-resistant clock and therefore cannot securely enforce time-based constraints. Changing the keys ensures that even such clients are forced to re-authenticate.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    It is a common misconception that the live stream keys are changed to improve cryptographic security. This is false. &lt;strong&gt;Changing the encryption keys on a regular basis provides no benefit in terms of cryptographic security.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Because the key will change at the same time for all viewers of a live stream it is important to deliver licenses containing the keys in advance of the actual key change and spread the license requests out across time to avoid overloading the DRM servers. Unfortunately, there are no industry-standard mechanisms for announcing upcoming keys, which means that the mechanism for preloading keys for upcoming key periods must be implemented using custom logic in each app.&lt;/p&gt;
&lt;p&gt;Given that new keys must anyway be pushed to DRM clients ahead of time, which requires a timing/coordinating workflow in the CMS, the same workflow should be harnessed to also provide updated keys to the content packager.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-a-schedule-based-workflow-publishes-key-changes-to-both-drm-clients-by-publishing-content-catalog-updates-and-the-content-packager&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-04/key-changes_huf0f1a79386abda446788dd6806a7d763_31658_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;715&#34; height=&#34;454&#34;&gt;



  
  
  &lt;figcaption&gt;
    A schedule-based workflow publishes key changes to both DRM clients (by publishing content catalog updates) and the content packager.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The mechanism for providing new keys in live stream scenarios is not standardized and is different for each content packager and key server implementation. Many different integration possibilities exist, depending on the exact set of products used in the solution. Some implementations may even use a &amp;ldquo;pull&amp;rdquo; model, where the content packager contacts an external service when it wants new keys.&lt;/p&gt;
&lt;h1 id=&#34;key-removal&#34;&gt;Key removal&lt;/h1&gt;
&lt;p&gt;Content is often licensed from content providers for a certain time span. For example, you may obtain rights to show certain movies for a 6-month period, after which you need to remove the content from your solution.&lt;/p&gt;
&lt;p&gt;You can offer content providers a high level of confidence that this is done by ensuring that your key management workflows include key expiration and automatic expired key removal and unpublishing (with relevant audit logs).&lt;/p&gt;
&lt;h1 id=&#34;key-seeds&#34;&gt;Key seeds&lt;/h1&gt;
&lt;p&gt;Occasionally one encounters key management architectures where keys are not individually managed but instead are mathematically derived from a key seed based on the key ID, using the (conceptual) equation &lt;code&gt;key = key seed + key ID&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In terms of cryptographic security there is nothing wrong with this - key seeds are a perfectly fine way to create keys. However, on a key management and solution architecture level this has various drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Even if you use key seeds to generate keys, you still need to track the usage policy associated with each key, largely defeating the simplicity in all but the simplest solutions that apply the same policy to all keys.&lt;/li&gt;
&lt;li&gt;Integration is complicated between systems using key seeds and those that do not, potentially requiring intermediate databases to be developed/maintained/secured.&lt;/li&gt;
&lt;li&gt;Different systems may use different key seed algorithms.&lt;/li&gt;
&lt;li&gt;Key removal becomes difficult to enforce - by knowing the key seed and key ID you can recreate any key that was derived from the key seed. To securely remove keys from a solution, you need to remove the key seed itself as well as the keys.&lt;/li&gt;
&lt;li&gt;Instead of tracking just a key ID in various places, you now find yourself tracking a key ID and a key seed ID, increasting complexity and creating additional opportunities for accidental data mismatch that can be very hard to discover.&lt;/li&gt;
&lt;li&gt;The security model implications are different; assumptions made when securing invididual keys might not hold when securing key seeds.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above are only the most obvious complications - the more systems a solution integrates, the greater the compatibility and maintenance cost of a single factor and the greater the possible amount of surprises that can come up.&lt;/p&gt;
&lt;p&gt;The primary advantage of a key seed approach is that you do not need to deliver new keys to the DRM server - as long as it knows the key seed, it can generate any key on its own. This may be an important feature in some rare scenarios.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid using key seeds&lt;/strong&gt;. If you are forced to use key seeds (e.g. due to legacy reasons), limit their use to the key server and have every other component deal with individual keys. Using key seeds offers some tradeoffs in rare situations but often end up making the key life cycle in a solution more difficult to understand. As DRM is already a fairly challenging topic, it is valuable to keep things as straightforward as possible.&lt;/p&gt;
&lt;h1 id=&#34;key-security&#34;&gt;Key security&lt;/h1&gt;
&lt;p&gt;Keys must be secured against misused at all times. On the viewer&amp;rsquo;s device, the DRM client cares for this. In all other components, the solution architecture must include required security measures to prevent key disclosure. When working with high-value content you must also protect against insider threats by the solution&amp;rsquo;s own operators - just because someone has administrator access to the servers does not mean they should have access to keys!&lt;/p&gt;
&lt;p&gt;Security is a huge topic that depends greatly on solution specific details. 
&lt;a href=&#34;../../#contact&#34;&gt;Consult an expert&lt;/a&gt; to develop a scenario-appropriate key security model for you.&lt;/p&gt;
&lt;h1 id=&#34;coming-up-next&#34;&gt;Coming up next&lt;/h1&gt;
&lt;p&gt;DRM signaling is data embedded into movie manifest files. It informs players on how to activate DRM clients. In the next article we take a look at how it travels through the content workflows of a solution and how it should be handled.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;../../categories/drm-is-not-a-black-box/&#34;&gt;View all articles in the series.&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/CPIX/master/Cpix.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Content Protection Information Exchange Format (CPIX)&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-PeriodReauth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF guidelines on periodic re-authorization&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>DRM is not a black box, part 3: secure playback</title>
      <link>/post/drm-is-not-a-black-box-03/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/drm-is-not-a-black-box-03/</guid>
      <description>&lt;p&gt;Security of DRM relies on keeping secret the cryptographic keys that protect content. The DRM client is the only component on the viewer&amp;rsquo;s device authorized to handle these keys. In the DRM security model the viewer is the attacker which means that a DRM client operates under very difficult conditions, running on an adversary&amp;rsquo;s device.&lt;/p&gt;
&lt;p&gt;While each DRM technology and each implementation of a DRM client is unique, every DRM technology aims to achieve the same goals and many DRM client implementations do it in similar ways. This article describes the general patterns that apply to all.&lt;/p&gt;
&lt;h1 id=&#34;robustness&#34;&gt;Robustness&lt;/h1&gt;
&lt;p&gt;The major differentiating factor between DRM client implementations is the &lt;strong&gt;robustness&lt;/strong&gt; level. This is a description of how resistant an implementation is to attacks and tampering.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Each DRM technology provider uses their own scale of robustness levels. One might use &amp;ldquo;robustness level 1000, 2000 and 3000&amp;rdquo; whereas another might use &amp;ldquo;low&amp;rdquo;, &amp;ldquo;medium&amp;rdquo;, &amp;ldquo;high&amp;rdquo; and &amp;ldquo;very high&amp;rdquo;. Understanding what a particular implementation offers requires understanding the terminology of the specific DRM technology.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There is no perfect DRM client implementation. A sufficiently skilled attacher can eventually extract the secrets from any of them. The core principle of DRM client security is to make this unreasonably expensive for the attacker. Every DRM client uses a defense in depth strategy to layer multiple defense mechanisms between the attacker and the keys or decrypted media samples.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;high robustness level&lt;/strong&gt; is provided by DRM client implementations that are built into the operating system and can make use of OS-level and hardware-level security mechanisms. In such implementations, cryptographic operations might be performed on a separate CPU. Valuable data such as keys and decrypted media samples might be stored only in a memory region inaccessible to the primary operating system. This level of robustness is typically mandatory if you wish to play back UHD or sometimes even HD content (depending on content owner policies).&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;low robustness level&lt;/strong&gt; is provided by DRM client implementations that are self-contained and do not integrate deeply with the operating system or hardware. This is typical for DRM clients built into browsers and apps. They rely on obfuscation to make it difficult for an attacker to observe what the DRM client does and to extract the keys and decrypted data. Despite not being part of the operating system, such implementations will still use operating system provided APIs to restrict unauthorized use where possible (e.g. by preventing output over HDMI to recording devices, only allowing output to display devices). This type of implementation typically does not permit for high-value content to be presented but is sufficient for playback of less security-critical content (e.g. movies that have completed their initial run in cinemas, presented in 720p resolution or lower).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    While many web browser based DRM clients are of low robustness, it is possible for a web browser to make use of a high robustness DRM client if the operating system provides one. Which is the case depends on the specific browser, operating system and device combination.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Widely deployed high-robustness DRM client implementations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft PlayReady on Windows&lt;/li&gt;
&lt;li&gt;Google Widevine on Android&lt;/li&gt;
&lt;li&gt;Apple FairPlay on Apple devices&lt;/li&gt;
&lt;li&gt;Microsoft PlayReady and/or Google Widevine on other consumer electronic devices (e.g. smart TV, set-top box, TV dongles)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For modular devices such as PCs, the exact device capabilities (e.g. type of installed CPU and active UEFI firmware configuration) may constrain the maximum available robustness level. For example, certain versions of PlayReady on Windows PCs only offer high robustness if the Intel Management Engine is present and enabled.&lt;/p&gt;
&lt;h1 id=&#34;robustness-brings-content&#34;&gt;Robustness brings content&lt;/h1&gt;
&lt;p&gt;The type of DRM client implementation you need to use in your solution depends on the requirements of the content provider. The higher the level of security you can provide, the more access to valuable content you will get. However, &lt;strong&gt;content providers typically do not provide clear and obvious guidelines on what security mechanisms are needed to license content&lt;/strong&gt;. They might publish best practices and refer to industry guidelines&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; but these publications should not be taken as requirements - you gain access to content if the content provider finds the risk/reward ratio of your security model and business case to be favorable. First and foremost, &lt;strong&gt;you need a well thought-out security model that covers all the relevant angles and is actually used as a basis for creating the solution, not merely written up after the fact during the content licensing discussion&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A common mistake is to treat the referenced best practices or industry guidelines as a set of requirements. While published industry guidelines tend to point you in the right direction, a security model is more than merely a set of checkboxes to tick. Indeed, not everything in the set of industry best practices is necessarily relevant or important in all solutions - every security decision must be considered in context.&lt;/p&gt;
&lt;p&gt;In the end you need to make some choices, describe your security model to a content provider and observe their response. The discussion can include several rounds of alignment and adjustment depending on the content you desire to gain access to.&lt;/p&gt;
&lt;p&gt;Mitigating factors can apply in some circumstances - for example, if, instead of targeting viewer owned devices, your playback devices are owned by the solution operator (e.g. they are screens mounted onto walls or into vehicles) you might be given more access to content because it will be difficult for an arbitrary viewer to gain operator-level access to such devices.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    While this article focuses on DRM client security, supply chain attacks by malicious employees are also a concern that needs to be addressed - content must be protected not only on viewer devices but at all times, including when devices are being serviced by authorized but potentially malicious operators. A separate article will cover end-to-end security in depth.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The goal in a content licensing security review is always to convince the content provider that you can provide content security, not to merely tick some checkboxes. To succeed at this, you must understand how DRM client robustness affects your solution and be able to explain this in detail. The rest of this article explores aspects of DRM client behavior at different levels of robustness.&lt;/p&gt;
&lt;h1 id=&#34;obtaining-keys&#34;&gt;Obtaining keys&lt;/h1&gt;
&lt;p&gt;A DRM client needs one or more keys to unlock a movie. Different keys are typically used for different components (e.g. a key for audio, a key for SD video tracks and another key for HD video tracks). During live streams, the keys may also be changed periodically&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; in order to force re-authorization checks.&lt;/p&gt;
&lt;p&gt;During DRM client activation&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; by a player, initialization data is provided. Initialization data informs the DRM client what keys it will need to play back content.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The workflows for DRM client activation are not meaningfully standardized and universally applicable patterns do not yet exist. Players and DRM clients may differ in activation behavior, even between different instances of using the same DRM technology.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If the required keys are not already in the DRM client key store, it will inform the app that it needs to acquire them via a &lt;strong&gt;license request&lt;/strong&gt; (aka key request).&lt;/p&gt;
&lt;p&gt;The reason the DRM client does not simply go and request the keys on its own is that the app needs to attach data to the license request, providing proof of authorization&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; for the DRM server, proving that the viewer really does have the right to use the requested keys.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-license-request-flow&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-03/license-request_huf0f936657272f740458ce01ff7a75427_25058_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;577&#34; height=&#34;459&#34;&gt;



  
  
  &lt;figcaption&gt;
    License request flow
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;If the viewer is authorized to use the requested keys, the authorized subset of keys&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; (which may be smaller than the requested set of keys) is embedded into a &lt;strong&gt;license&lt;/strong&gt; that is returned by the DRM server as a response to the license request. Processing the license makes the keys usable by the DRM client.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    When is the authorized subset of keys different from what is requested? This is up to business logic. For example, if the user does not have a subscription that permits 4K playback, they would not get authorization to use the key for the 4K quality level. This would not prevent successful playback of lower quality levels.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Even if an authorization token is present, only genuine DRM clients that can prove their authenticity are granted keys. A separate article will cover DRM client and server authentication in detail.&lt;/p&gt;
&lt;h1 id=&#34;protecting-keys&#34;&gt;Protecting keys&lt;/h1&gt;
&lt;p&gt;The keys in the license are themselves encrypted using a public key, the private key complement of which is held by the DRM client. Protecting this private key is critical to DRM client security as it allows the keys within a license to be decrypted.&lt;/p&gt;
&lt;p&gt;In high-robustness DRM clients, the client private key is only usable within a secure enclave (aka trusted execution environment). The exact security mechanisms used to create the secure enclave depend on the operating system and device hardware capabilities.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-high-robustness-drm-clients-protect-secrets-using-a-secure-enclave&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-03/high-robustness-secure-enclave_hua13fc77996bb5324a1b8c59bd78a96da_18973_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;698&#34; height=&#34;320&#34;&gt;



  
  
  &lt;figcaption&gt;
    High robustness DRM clients protect secrets using a secure enclave.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The effect of using a secure enclave is that the DRM client is able to use its private key for decryption without exposing the private key outside the enclave. Furthermore, the decrypted data itself (the key used to decrypt movie data) is not exposed outside the enclave, being directly plugged into the movie decryption process that exists out of reach of the attacker.&lt;/p&gt;
&lt;p&gt;DRM clients lacking the capability to use a secure enclave must rely only on obfuscation and anti-tampering countermeasures to protect the private key of the DRM client, the movie keys and the decrypted media samples.&lt;/p&gt;
&lt;p&gt;The typical technique for low robustness clients is to use white-box cryptography&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; to obscure parts of the cryptographic processes within the DRM client. The core principle of white-box cryptography is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The DRM client private key is merged into the decryption algorithm (possibly also merging multiple sequential decryption keys/algorithms).&lt;/li&gt;
&lt;li&gt;The combined algorithm is obfuscated to make it very difficult to identify what part of it is the key.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result is that the DRM client has an algorithm that takes encrypted movie keys and the encrypted movie as input and, without requiring any DRM client private key as input nor exposing the decrypted movie key, decrypts the movie data.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-low-robustness-drm-clients-protect-secrets-using-white-box-cryptography&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-03/low-robustness-whitebox-crypto_huce1008a2b18ae9e8a7ff9f60c5f44188_10521_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;528&#34; height=&#34;223&#34;&gt;



  
  
  &lt;figcaption&gt;
    Low robustness DRM clients protect secrets using white-box cryptography.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Note that the interface between the decryption algorithm and the media decoder still needs protecting (using operating system specific means) to prevent the decrypted samples from being intercepted and recorded.&lt;/p&gt;
&lt;p&gt;A sufficiently skilled cryptanalyst may still be able to extract the keys from a DRM client that uses white-box cryptography but a good implementation will make it significantly more expensive in terms of time and effort. Ideally, so expensive as to make key extraction attacks impractical.&lt;/p&gt;
&lt;h1 id=&#34;enforcing-policy-decisions&#34;&gt;Enforcing policy decisions&lt;/h1&gt;
&lt;p&gt;In addition to protecting keys and decrypted samples, the DRM client is also in charge of enforcing the policy constraints attached to the licenses that deliver keys.&lt;/p&gt;
&lt;p&gt;This policy can include elements derived from both solution-specific needs and from content provider requirements. Common examples of license policy are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License expires on specific date/time.&lt;/li&gt;
&lt;li&gt;Playback is only permitted on output devices that support HDCP&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; 2.2.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    HDCP is an example of an &lt;strong&gt;output protection technology&lt;/strong&gt;. These are sometimes confused with DRM but are entirely separate. Output protection applies to the signal between the device&amp;rsquo;s graphics card and the display - it protects against the signal being intercepted on the cables coming out of a device.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In general, different DRM technologies offer equivalent capabilities in terms of policy configuration. However, the exact technical language used to describe policy decisions will be different for each DRM technology.&lt;/p&gt;
&lt;p&gt;The policy starts as human-readable (e.g. English) text in a contract. This text has numerous effects on the implementation but the policy that specifically controls DRM client behavior is typically handled as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The human-readable contract language is translated to a machine-readable rules language, managed using a CMS.&lt;/li&gt;
&lt;li&gt;These rules control the policy configuration in authorization tokens emitted by the authorization service.&lt;/li&gt;
&lt;li&gt;The DRM server translates these generic rules to a DRM technology specific configuration when granting a license.&lt;/li&gt;
&lt;/ol&gt;





  
  











&lt;figure id=&#34;figure-protection-policy-flow-in-typical-solution-architecture&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-03/policy-flow_hueabfa81cb4d1eeed1a95750eb2e1f77b_26067_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;473&#34; height=&#34;512&#34;&gt;



  
  
  &lt;figcaption&gt;
    Protection policy flow in typical solution architecture.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Not every DRM client will be able to enforce every policy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To enforce time-based policy, the DRM client needs a tamper-resistant clock.&lt;/li&gt;
&lt;li&gt;To enforce HDCP, the DRM client needs access to an opeating system API that enables HDCP usage to be controlled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The license request typically contains information about the DRM client&amp;rsquo;s capabilities. This set of capabilities can be evaluated by the DRM server to determine what policies are enforceable by the DRM client. Insufficient capabilities may limit the set of keys that can be made available or result in a denial of license.&lt;/p&gt;
&lt;h1 id=&#34;whats-the-difference&#34;&gt;What&amp;rsquo;s the difference?&lt;/h1&gt;
&lt;p&gt;High-robustness DRM client implementations require deep integration with the operating system and hardware. DRM clients delivered as browser or app plugins are low robustness implementations. &lt;strong&gt;Native DRM clients provided by the operating system have a significant advantage in terms of security and should be preferred.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The content of this article applies to all modern DRM technologies in widespread use. Given that all DRM technologies aim to achieve the same thing one may wonder why there are non-native DRM client implementations available for many devices/browsers, especially if the native DRM client often provides far better robustness than its competition.&lt;/p&gt;
&lt;p&gt;This largely comes down to history. There used to be multiple competing DRM technologies offering equivalent (low) robustness levels at equivalent (high) prices. Eventually, platform authors (Microsoft, Google, Apple) and their licensees started offering high-robustness DRM built right into the platform. In parallel, the DRM technology authors lowered the technology licensing prices to very reasonable levels making competition on price largely irrelevant.&lt;/p&gt;
&lt;p&gt;The policy-enforcement capabilities of all modern DRM clients are effectively equivalent. While small technical differences exist, DRM clients do not compete based on what types of protection policies they can enforce.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Different low robustness DRM clients may have different capabilities when it comes to protection against screen capture software. Still, these differences are typically not significant enough to result in meaningful competition between DRM clients. This is often also device-specific and version-specific, with the exact capabilities sometimes difficult to even determine in a reliable way.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There is almost no reason today to use anything other than the native DRM implementation. On Apple platforms, FairPlay DRM is easy to use and offers high robustness. On Google platforms, Widevine DRM is king. On Microsoft platforms, PlayReady offers the best features. On playback-specialized consumer electronic devices (e.g. Smart TVs, set-top boxes and TV dongles) you often find multiple high-robustness DRM implementations (typically both PlayReady and Widevine are available).&lt;/p&gt;
&lt;p&gt;Two practical obstacles remain to use of high-robustness native DRM clients:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Windows-native PlayReady DRM is only available to Microsoft browsers, with all other web browsers forced to use low-robustness plugin-based DRM clients. Obviously, this gives Microsoft browsers a competitive advantage - low robustness DRM in other browsers is limited to showing low quality content&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Legacy solutions deployed many years ago may already be heavily invested in a single DRM technology, having locked themselves into certain technical or business decisions, and lack the architectural agility to start using the best modern DRM clients which would permit them to present even higher value content.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As long as an implementation of the required robustness level is available on a given platform, there are no significant technical differences between DRM technologies. If you are creating a new solution, &lt;strong&gt;use the native DRM technology on each device&lt;/strong&gt; and build your solution based on open industry specifications&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;,&lt;/sup&gt;&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;. This gives the best capability and flexibility while avoiding lock-in to unusual DRM clients for a given platforms.&lt;/p&gt;
&lt;p&gt;Using a DRM service provider to buy in the bulk of DRM infrastructure or 
&lt;a href=&#34;../../#contact&#34;&gt;consulting a seasoned DRM expert&lt;/a&gt; to design your own infrastructure can both greatly simplify DRM technology integration, reducing the cost in terms of time and money. A future article will provide an in-depth look at what the integration of a specific DRM technology means for a solution and what role DRM service providers play.&lt;/p&gt;
&lt;h1 id=&#34;coming-up-next&#34;&gt;Coming up next&lt;/h1&gt;
&lt;p&gt;Where do the keys even come from? How are they created and transported across a solution? You will find out soon, as 
&lt;a href=&#34;../drm-is-not-a-black-box-04/&#34;&gt;the next article is all about key management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;../../categories/drm-is-not-a-black-box/&#34;&gt;View all articles in the series.&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.motionpictures.org/what-we-do/advancing-creativity/additional-resources/#content-protection-best-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MPAA Content Protection Best Practices&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-PeriodReauth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF guidelines on periodic re-authorization&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-activation-workflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF recommended workflow for DRM client activation&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-lr-model-authz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF recommended license request model&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-unavailable-keys&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF guidelines on handling partial availability of content keys&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.whiteboxcrypto.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;White-box cryptography&lt;/a&gt; &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/High-bandwidth_Digital_Content_Protection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HDCP (Wikipedia)&lt;/a&gt; &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://help.netflix.com/en/node/23931&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using Netflix on your Windows computer or tablet: Netflix in Ultra HD&lt;/a&gt; &lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF implementation guidelines: content protection and security&lt;/a&gt; &lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/CPIX/master/Cpix.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF Implementation Guidelines: Content Protection Information Exchange Format (CPIX)&lt;/a&gt; &lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>DRM is not a black box, part 2: encryption and content</title>
      <link>/post/drm-is-not-a-black-box-02/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/drm-is-not-a-black-box-02/</guid>
      <description>&lt;p&gt;The internet is the birthplace of modern DRM. Even if you deploy an offline solution with local playback, DRM technologies operate with least hassle when your solution uses modern adaptive streaming technologies. A content processing workflow designed for adaptive streaming is a content processing workflow ready for DRM.&lt;/p&gt;
&lt;p&gt;The two media delivery technologies of relevance here are DASH&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and HLS&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. The Apple ecosystem uses HLS, whereas everything else uses DASH. In order to understand encryption, you need to understand how content is structured when using these technologies.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Other lesser known delivery technologies are occasionally used by some vendors. However, these alternative technologies are insignificant in the big picture and their use only leads to vendor lock-in and excessive cost. Use DASH and HLS.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;structure-of-dash-and-hls&#34;&gt;Structure of DASH and HLS&lt;/h1&gt;
&lt;p&gt;Most solutions wish to target viewers on both Apple and non-Apple platforms and therefore need to present all content using both the DASH and HLS delivery technologies. Thankfully this is not as burdensome as it sounds because the two are in fact different flavors of the same thing.&lt;/p&gt;
&lt;p&gt;The link between the two technologies is CMAF&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; (a cousin of the well-known MP4 file format) which defines a common format for media data storage compatible with both DASH and HLS. The latter two technologies define the format of the &lt;strong&gt;manifest&lt;/strong&gt; files that contain instructions for players on how to access the content stored in the shared CMAF media files.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-relationships-between-dash-hls-and-cmaf&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/dash-hls-cmaf_huc0d1bf4dbd1d5fa403595f55ce6350b5_16661_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;405&#34; height=&#34;287&#34;&gt;



  
  
  &lt;figcaption&gt;
    Relationships between DASH, HLS and CMAF
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;DASH manifest files are served to DASH players, which will use the information within to load data from CMAF media files. HLS manifest files are served to HLS players, which will use the information within to load data from CMAF media files. As the bulk of the data is in the shared CMAF files, there is no duplication of storage costs or excessive CDN throughput despite using two different media delivery technologies.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The contents of the HLS and DASH manifest files are quite similar and it is often easy to convert from one to the other. This means that a content processing workflow only capable of working with either DASH or HLS can be easily enhanced by post-processing to produce the other manifest format.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The audio and video data exists in the form of &lt;strong&gt;samples&lt;/strong&gt;, where one sample is one video frame (e.g. 24 samples per second) or a similar duration of audio data. Samples are grouped into self-contained &lt;strong&gt;segments&lt;/strong&gt; of 2-10 second duration, where each segment is independently presentable by players without having to reference data in any other segment. A &lt;strong&gt;CMAF header&lt;/strong&gt; contains the technical parameters required for a decoder to process the data contained in the segments.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-structure-of-cmaf-media-data-storage&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/drm-is-not-a-black-box-02/structure_hud23d80927c2dbf72f5510d55cb4f781d_16601_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Structure of CMAF media data storage&#34;&gt;


  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/structure_hud23d80927c2dbf72f5510d55cb4f781d_16601_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;575&#34; height=&#34;400&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Structure of CMAF media data storage
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Segments may either be stored in separate files or in one giant CMAF track file (effectively just a concatenated series of segments prefixed with the CMAF header). The storage format largely depends on workflow-specific configuration and content processing service compatibility - different services expect the data to exist in different forms.&lt;/p&gt;
&lt;h1 id=&#34;applying-drm-to-movies&#34;&gt;Applying DRM to movies&lt;/h1&gt;
&lt;p&gt;The media samples stored inside the CMAF files are encrypted. DRM technologies rely on encryption to control when and where the media data can be used for playback, creating situations where the decryption key is only provided to authorized DRM clients and only when all the necessary conditions to ensure adequate content protection are met.&lt;/p&gt;
&lt;p&gt;Encryption is performed individually for each sample - it is not the files themselves that are encrypted but only the actual audio/video data within them. Even there, encryption is only partially applied - for video data only 10% of each sample is encrypted, leaving 90% in the clear. As the encryption is applied in a repeating pattern of 1:9 blocks, it is sometimes called &lt;strong&gt;pattern encryption&lt;/strong&gt;. One block is 16 bytes.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-10-pattern-encryption-applied-to-data-in-video-samples&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/pattern-encryption_hu0aaf388355e1e6fea96100781571c40d_4597_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;504&#34; height=&#34;383&#34;&gt;



  
  
  &lt;figcaption&gt;
    10% pattern encryption applied to data in video samples
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The rationale for using pattern encryption is that encrypting 10% of the data is sufficient to make the samples unusable without the key while minimizing the impact of decryption on processor capacity and battery life. Audio samples are fully encrypted due to their relatively small size.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A small prefix of up to 32 bytes in each sample is typically left in the clear to enable sample headers to be processed. This technique of dividing a sample into clear and encrypted regions is called &lt;strong&gt;subsample encryption&lt;/strong&gt;. For encryption algorithm purposes (e.g. where does the 10% pattern start) the clear prefix is considered not to be a part of the sample.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-subsample-encryption-leaves-an-optional-clear-prefix-to-expose-the-sample-headers&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/subsample-encryption_hu0afda73aaeaf539bab2ab42eece5ae8e_2803_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;503&#34; height=&#34;212&#34;&gt;



  
  
  &lt;figcaption&gt;
    Subsample encryption leaves an optional clear prefix to expose the sample headers
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Subsample encryption is typically only used with video tracks and does not need to be configured by the operator - content processing tools that encrypt data already know when a clear prefix is required and will insert it automatically.&lt;/p&gt;
&lt;p&gt;The technical details of encryption are described by the &lt;code&gt;cbcs&lt;/code&gt; protection scheme defined in the Common Encryption&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; standard. You may see material online referencing the &lt;code&gt;cenc&lt;/code&gt; protection scheme but this scheme is effectively becoming obsolete as Apple devices do not support it. Modern devices use &lt;code&gt;cbcs&lt;/code&gt;. In addition to cryptographic differences, the &lt;code&gt;cenc&lt;/code&gt; protection scheme does not use pattern encryption but encrypts the entire sample.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    If your target device set contains devices that do not support the &lt;code&gt;cbcs&lt;/code&gt; protection scheme then you will need to create two copies of every encrypted track - one encrypted with &lt;code&gt;cbcs&lt;/code&gt; (for Apple and newer non-Apple devices) and one with &lt;code&gt;cenc&lt;/code&gt; (for older non-Apple devices).
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After applying encryption the movie is safe for publishing over unprotected channels. You do not need to guard access to the files as the content cannot be accessed without the key. In some high-security scenarios, you might still care about protecting access to the files as part of a defense-in-depth strategy (e.g. by using URL signing to control who can download the files) but on a cryptographic level the sample data is now unusable for an attacker.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    All modern DRM technologies use the same encryption algorithms that are equally strong - there is no difference in the strength of encryption between DRM technologies. However, different DRM client implementations do have different strengths and weaknesses. This will be explored in depth by the &lt;a href=&#34;../drm-is-not-a-black-box-03/&#34;&gt;next article in this series&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To apply encryption, you need to know the &lt;strong&gt;key&lt;/strong&gt; and the &lt;strong&gt;key ID&lt;/strong&gt; (or &lt;strong&gt;KID&lt;/strong&gt;). The key is a 128-bit symmetric key (i.e. the same key is used for encryption and decryption). The KID is a separate (non-secret) 128-bit value used elsewhere in DRM workflows to reference a specific key. Key management is a large topic of its own, to be covered in a separate article.&lt;/p&gt;
&lt;p&gt;Different data formats are used for representing keys and KIDs, depending on the situation and the specific piece of software. In practice, the KID is typically formatted as a GUID&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; (&lt;code&gt;a0a8db17-20c7-4068-bfbd-f8a68e34f1a5&lt;/code&gt;) and the key as a base64 or hexadecimal string (&lt;code&gt;FSu0UIH8Z06IOyXVlnmc8Q==&lt;/code&gt; or &lt;code&gt;0x152bb45081fc674e883b25d596799cf1&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;GUIDs have multiple different binary representations! The &amp;ldquo;Linux style&amp;rdquo; binary format is acheived by removing the dashes and treating a GUID as a hexadecimal string. The &amp;ldquo;Windows style&amp;rdquo; binary format is achieved in a more complex fashion, with a different order of bytes.&lt;/p&gt;
&lt;p&gt;Media streaming systems typically use the Linux style binary format. This has caused much pain when software platforms assume Windows style and developers only discover that 2 years into production when integrating another system that uses Linux style. In hindsight using GUIDs for KIDs was a mistake but it&amp;rsquo;s too late to go back now.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A different key is used for tracks carry content with different value (e.g. 4K quality is more valuable than SD quality) or different decoder paths (audio versus video). For example, a typical movie might use the following set of keys:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SD video key&lt;/li&gt;
&lt;li&gt;HD video key&lt;/li&gt;
&lt;li&gt;UHD video key&lt;/li&gt;
&lt;li&gt;audio key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After encrypting the samples, the CMAF header and segment header are extended with encryption-relevant information&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;. The DASH and HLS manifest are annotated, at minimum, with the KID of each track. Often, DRM client initialization data is also added to the manifests.&lt;/p&gt;
&lt;h1 id=&#34;embedded-initialization-data&#34;&gt;Embedded initialization data&lt;/h1&gt;
&lt;p&gt;A player needs to provide &lt;strong&gt;initialization data&lt;/strong&gt; to a DRM client in order to activate it. The format of this data is specific to the DRM technology but is typically based on the &lt;code&gt;pssh&lt;/code&gt; format defined by Common Encryption&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;DRM client initialization data is embedded into the DASH and HLS manifests for every DRM technology that the solution integrates with at the time of content processing. The manifest files can be easily extended with more initialization data when additional DRM technologies are integrated into a solution.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Historically, initialization data was embedded into the CMAF header instead of manifest files but this approach is deprecated due to maintenance problems it caused - it is much harder to change the CMAF header if you need to replace or extend the DRM initialization data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is an example of PlayReady and FairPlay initialization data for the same KID, in DASH format for PlayReady and HLS format for FairPlay. PlayReady uses the &lt;code&gt;pssh&lt;/code&gt; format, whereas FairPlay uses a URL-like initialization data format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;ContentProtection value=&amp;quot;MSPR 2.0&amp;quot; schemeIdUri=&amp;quot;urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95&amp;quot;&amp;gt;
  &amp;lt;cenc:pssh&amp;gt;AAAB5HBzc2gAAAAAmgTweZhAQoarkuZb4IhflQAAAcTEAQAAAQABALoBPABXAFIATQBIAEUAQQBEAEUAUgAgAHgAbQBsAG4AcwA9ACIAaAB0AHQAcAA6AC8ALwBzAGMAaABlAG0AYQBzAC4AbQBpAGMAcgBvAHMAbwBmAHQALgBjAG8AbQAvAEQAUgBNAC8AMgAwADAANwAvADAAMwAvAFAAbABhAHkAUgBlAGEAZAB5AEgAZQBhAGQAZQByACIAIAB2AGUAcgBzAGkAbwBuAD0AIgA0AC4AMAAuADAALgAwACIAPgA8AEQAQQBUAEEAPgA8AFAAUgBPAFQARQBDAFQASQBOAEYATwA+ADwASwBFAFkATABFAE4APgAxADYAPAAvAEsARQBZAEwARQBOAD4APABBAEwARwBJAEQAPgBBAEUAUwBDAFQAUgA8AC8AQQBMAEcASQBEAD4APAAvAFAAUgBPAFQARQBDAFQASQBOAEYATwA+ADwASwBJAEQAPgBKAFEAegBJACsAQQA5AHAATgBrAGUAQgBNAGsATQBPAFgARwBtAFUAegBnAD0APQA8AC8ASwBJAEQAPgA8AC8ARABBAFQAQQA+ADwALwBXAFIATQBIAEUAQQBEAEUAUgA+AA==&amp;lt;/cenc:pssh&amp;gt;
&amp;lt;/ContentProtection&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#EXT-X-SESSION-KEY:METHOD=SAMPLE-AES,URI=&amp;quot;skd://f8c80c25-690f-4736-8132-430e5c6994ce:51BB4F1A7E2E835B2993884BD09ADB19&amp;quot;,KEYFORMAT=&amp;quot;com.apple.streamingkeydelivery&amp;quot;,KEYFORMATVERSIONS=&amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initialization data is obviously unique for each DRM technology but also for each key, because it typically contains the KID. Because of this, initialization data can make up a surprisingly large portion of a manifest file.&lt;/p&gt;
&lt;p&gt;It is most common to provide initialization data as part of the configuration for the content packager that performs the encryption. Different packagers accept configuration in different ways (some even use a hybrid push-pull model to retrieve different parts of the configuration in different ways). No matter how the configuration is defined the end result is the same: DRM initialization data is given to the packager by an external system.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-unique-initialization-data-is-associated-with-each-key-and-each-drm-technology&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/initdata-on-packager_hu9fce4d5bd4b1a0b68c37623c02caf6dd_25433_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;664&#34; height=&#34;407&#34;&gt;



  
  
  &lt;figcaption&gt;
    Unique initialization data is associated with each key and each DRM technology
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Some content packagers, however are capable of generating DRM initialization data on their own. This can lead to significant simplification in the backend workflows. You should use this capability whenever possible.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-in-many-cases-the-packager-can-simply-generate-drm-initialization-data-if-it-knows-what-drm-technologies-are-to-be-used&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/initdata-generated-on-packager_hu74e4a2f81fb78a90ec66acb0c5d7d6f1_25118_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;715&#34; height=&#34;531&#34;&gt;



  
  
  &lt;figcaption&gt;
    In many cases, the packager can simply generate DRM initialization data if it knows what DRM technologies are to be used
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h1 id=&#34;initialization-data-is-legacy&#34;&gt;Initialization data is legacy&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Other than to provide initialization data, there is no reason the content processing workflow even needs to know what DRM technologies will be used with the content!&lt;/strong&gt; The requirement to embed this data into the manifests complicates data flows and often does so needlessly. Reducing unnecessary interactions in DRM workflows is a critical part of making it simple to integrate DRM into a solution, so this requirement is best eliminated.&lt;/p&gt;
&lt;p&gt;DRM initialization data is a mechanism for configuring DRM client behavior. It exists because there used to be no APIs that players could use to communicate with a DRM client - any configuration of DRM client behavior had to be done by embedding a DRM technology specific blob into the video itself. Later, this blob moved into the manifest files for easier manipulation. Today, the times have changed and modern DRM clients do offer APIs (e.g. Encrypted Media Extensions&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; and equivalents). As a result, DRM initialization data often contains no information of value. Yet it persists in the APIs and workflows as an artifact of history.&lt;/p&gt;
&lt;p&gt;In principle, providing DRM initialization data in the manifest files is optional - the initialization data could be acquired through other means by the player or even generated on the fly. Unfortunately, few players currently implement DRM client activation without embedded initialization data.&lt;/p&gt;
&lt;p&gt;In short, the initialization data is typically just a DRM technology specific way to represent the KID. &lt;strong&gt;If possible, use players that can generate DRM client initialization data on the fly - by separating DRM technologies from your content pipeline you will achieve a more robust and maintainable solution architecture&lt;/strong&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-player-can-generate-drm-initialization-data-and-greatly-reduce-content-processing-complexity-and-simplify-interactions-in-drm-workflows&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/initdata-on-player_huae6841bf243854e3d25956f48bc90a75_15501_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;443&#34; height=&#34;276&#34;&gt;



  
  
  &lt;figcaption&gt;
    The player can generate DRM initialization data and greatly reduce content processing complexity and simplify interactions in DRM workflows
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;DRM client initialization data is specific to each DRM technology and to each key. As such, a unique instance of the initialization data is embedded into the DASH and HLS manifests for each key used to encrypt the movie and for each DRM technology the movie is to be used with. A movie with a typical set of 4 keys, used with 3 DRM technologies, would have 4x3=12 instances of DRM initialization data embedded into it. &lt;strong&gt;By generating initialization data at runtime, you also benefit from minimizing the size of the manifest files, leading to greater efficiency, especially in live scenarios where the manifest must be refreshed periodically.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-encrypted&#34;&gt;What is encrypted?&lt;/h1&gt;
&lt;p&gt;Audio and video tracks are encrypted. Text tracks (subtitles) are not.&lt;/p&gt;
&lt;p&gt;Text tracks are technically equivalent to audio and video tracks but are entirely ignored in this series of articles because in practice they are never encrypted nor protected by DRM.&lt;/p&gt;
&lt;h1 id=&#34;what-requires-configuration&#34;&gt;What requires configuration?&lt;/h1&gt;
&lt;p&gt;It can be confusing to tell the difference between what part of the encryption process is handled automatically by media processing products or services and what must be explicitly configured by an operator.&lt;/p&gt;
&lt;p&gt;There is no straightforward answer as the details depend on the exact products and services used to perform the encryption - if you use very low-level media processing tools you may need to provide low level details, whereas if you use a fully automated publishing pipeline then you might not need to do anything at all.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;../../#contact&#34;&gt;Consult an expert&lt;/a&gt; to determine the appropriate setup for your specific situation.&lt;/p&gt;
&lt;h1 id=&#34;coming-up-next&#34;&gt;Coming up next&lt;/h1&gt;
&lt;p&gt;Having encrypted the samples and embedded DRM client initialization data, the content is ready to be served. 
&lt;a href=&#34;../drm-is-not-a-black-box-03/&#34;&gt;The next article will take a look at the duties of the DRM client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Key management and other DRM-relevant data flows in the content pipeline will be covered in a separate article.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;../../categories/drm-is-not-a-black-box/&#34;&gt;View all articles in the series.&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.iso.org/standard/79329.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO/IEC 23009-1:2019 (MPEG-DASH)&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://tools.ietf.org/html/rfc8216&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 8216&lt;/a&gt; and 
&lt;a href=&#34;https://developer.apple.com/streaming/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP Live Streaming (Apple)&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.iso.org/standard/79106.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO/IEC 23000-19:2020 (MPEG-CMAF)&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.iso.org/standard/68042.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO/IEC 23001-7:2016 (Common Encryption)&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://devblogs.microsoft.com/oldnewthing/20190426-00/?p=102450&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How many ways are there to sort GUIDs? How much time do you have?&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-cmaf-structure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF Implementation Guidelines: Content Protection and Security (8.1 Content protection data in CMAF containers)&lt;/a&gt; &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.w3.org/TR/encrypted-media/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W3C Encrypted Media Extensions&lt;/a&gt; &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>DRM is not a black box, part 1: why would you use DRM</title>
      <link>/post/drm-is-not-a-black-box-01/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/drm-is-not-a-black-box-01/</guid>
      <description>&lt;p&gt;Apps, websites and services presenting high value video content use DRM technologies to prevent the viewer from making copies of the content. It can be surprising to learn that the website operator is not the one who ultimately benefits from DRM.&lt;/p&gt;
&lt;p&gt;The past twelve years of my work on media streaming projects and products have kept me in close contact with DRM. This is the first 
&lt;a href=&#34;/categories/drm-is-not-a-black-box/&#34;&gt;in a series of articles&lt;/a&gt; that will briefly explain how the DRM ecosystem functions, in the hope that this will help lift a needless veil of secrecy that surrounds the topic. There is no need to work in the shadows when it comes to DRM - the techniques and mechanisms used should be well understood by all stakeholders to ensure that they are put to the best use.&lt;/p&gt;
&lt;h1 id=&#34;content-licensing&#34;&gt;Content licensing&lt;/h1&gt;
&lt;p&gt;A typical company that intends to publish a media streaming solution will first encounter DRM when they try to license some content to offer their viewers. Early in the negotiations, the content provider presents the solution operator with a security questionnaire to fill out. This will include questions both open-ended and highly specific, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is your security model?&lt;/li&gt;
&lt;li&gt;Do you enforce removal of content from viewers whose subscription has lapsed?&lt;/li&gt;
&lt;li&gt;Does your solution detect jailbroken devices? If yes, how?&lt;/li&gt;
&lt;li&gt;What is the maximum video resolution you support for each platform you target?&lt;/li&gt;
&lt;li&gt;Which certificates are used for authenticity verification and who signs them? Does it depend on type of device? If so, how?&lt;/li&gt;
&lt;li&gt;Does yous solution offer protection against malicious system operators making unauthorized copies? If so, how?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Which DRM technologies are used?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There can be as many as 20 pages of questions to answer and forms to fill, the purpose of which is to provide the content provider&amp;rsquo;s security experts the information they need to evaluate the solution&amp;rsquo;s content security capabilities. &lt;strong&gt;The security questionnaire is not a requirements list. A solution does not need to answer &amp;ldquo;yes&amp;rdquo; to every question and to deploy every mechanism listed.&lt;/strong&gt;&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-content-licensing-relationships&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-01/content-licensing_hue99ec5932667dbd61dcd2648619ebbe1_14764_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;592&#34; height=&#34;171&#34;&gt;



  
  
  &lt;figcaption&gt;
    Content licensing relationships
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The level of security provided by the solution is evaluated against the policy defined by the content provider to determine what content can be licensed for use in the solution. A solution that provides better security guarantees will unlock the possibility to license more valuable content.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The term &amp;ldquo;content owner&amp;rdquo; refers to the rights holder. However, most content owners license content directly only to very large customers. This means that in practice content is licensed from an intermediary, often together with post-processing, encoding and/or metadata services, here referred to as content provider.&lt;/p&gt;
&lt;p&gt;The content owner is ultimately the one who decides the policy associated with a title but in many cases the solution builder never interacts directly with them, all daily interactions being with the content provider.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Different titles have different security requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4K resolution superhero movies tend to be the most valuable content - very few solution operators can offer security strong enough to license such content. This requires hardened devices and a supply chain where every link is secure and traceable.&lt;/li&gt;
&lt;li&gt;Early-window content (still playing in cinemas) has fairly high requirements but these can be met by most serious solution operators that have control over the full chain of systems involved in the solution.&lt;/li&gt;
&lt;li&gt;Anything already available of DVD has quite low requirements, as DVDs can be trivially copied.&lt;/li&gt;
&lt;li&gt;Library content (e.g. movies 10 or more years old) has minimal requirements, often being available even without the use of DRM technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the main basis for the decision is the earning potential of the title for the content owner, technical factors can still have an impact. For example, high-value content can be authorized for playback in less than ideal solutions if presented only at low quality levels (SD resolution).&lt;/p&gt;
&lt;h1 id=&#34;the-questions-and-answers-are-not-the-security-model&#34;&gt;The questions and answers are not the security model&lt;/h1&gt;
&lt;p&gt;Ten years ago it was common to see the security questionnaires treated as &amp;ldquo;write-only&amp;rdquo; information in large part - as long as you answered the questions with what sounded like reasonable answers, you got the content. Nowadays, the depth of evaluation has increased and there are actual security experts reviewing the questionnaires in detail. If the text tries to be vague and lacks sufficient depth then additional rounds of inquiry are scheduled and pointed questions are raised to uncover the reasons for the vagueness.&lt;/p&gt;
&lt;p&gt;This means that it is no longer easy to get away with just filling in convincing-sounding individual answers - the solution architect needs to present a complete set of responses that will convince the security expert reading the text that content security is a core part of the solution. The big picture presented by the answers is a significant component in the security expert&amp;rsquo;s evaluation. &lt;strong&gt;Treating the questionnaire as a list of checkboxes to tick will result in less access to content than one would obtain by presenting a thought-out security model that has meaning also outside the security questionnaire.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There can be a vast difference between the architecture and functioning of a solution designed to handle high-value content and of a solution designed without security principles in mind. It can be quite expensive to retrofit security into a solution if the need is only discovered at a late stage when a content provider security review raises painful questions. Content security should be built into a solution from the start. 
&lt;a href=&#34;../../#contact&#34;&gt;Consult an expert&lt;/a&gt; to design a security model that meets your needs.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-role-of-drm&#34;&gt;What is the role of DRM?&lt;/h1&gt;
&lt;p&gt;The content licensing process is where a typical solution architect will first encounter DRM, with the first question being &amp;ldquo;which DRM technology is used&amp;rdquo;. A typical solution operator publishing content made by other parties will not care about DRM for their own benefit - viewers tend to be rule-abiding customers and even if a few individuals make unauthorized copies the business will not be impacted much. However, content owners care deeply about each and every time their content is accessed because a single unauthorized copy is enough to have a large impact across the entire viewership!&lt;/p&gt;
&lt;p&gt;Therefore, the usual thinking with regard to DRM is &amp;ldquo;what will satisfy the content owner&amp;rdquo; and not &amp;ldquo;what do I gain from DRM&amp;rdquo;. &lt;strong&gt;Most solution operators see DRM integration as a tax they have to pay in order to obtain content.&lt;/strong&gt; One of the main goals for this series of articles attempts to reduce the budren of implementing DRM by helping solution architects new to DRM to understand the processes involved.&lt;/p&gt;
&lt;p&gt;Each content owner has a list of DRM technologies they have approved for use with thier content. The most common in use today are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Widevine - available on Android, Chrome, Firefox, Edge and various consumer electronic devices&lt;/li&gt;
&lt;li&gt;Microsoft PlayReady - available on Windows, Edge and many consumer electronic devices&lt;/li&gt;
&lt;li&gt;Apple FairPlay - available on Apple devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three are the core technologies of the DRM ecosystem and are approved for use by all content owners.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The 2019 China-US trade sanctions block Chinese manufacturers from using DRM technologies of US-based companies. As a result, Huawei Wiseplay DRM is likely to become a prominent DRM technology in the near future.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nearly all modern consumer electronic devices include at least one native DRM technology implementation. Devices designed specifically for content playback, such as a smart TV or video-dongle, will typically support both Widevine and PlayReady, plus a few lesser known DRM technologies.&lt;/p&gt;
&lt;p&gt;Beyond the big three, there are several other DRM technologies that are also approved by many content owners but typically they are used less often as they are not natively supported by most devices and software platforms, requiring the use of plugins and specialized player apps.&lt;/p&gt;
&lt;h1 id=&#34;technical-components-of-drm-technologies&#34;&gt;Technical components of DRM technologies&lt;/h1&gt;
&lt;p&gt;Obviously, there is some DRM code that must run on a viewer&amp;rsquo;s device in order to perform the functions expected of a DRM technology - that is, to stop the content from being copied. How this &lt;strong&gt;DRM client&lt;/strong&gt; is delivered and how it integrates with the device&amp;rsquo;s capabilities can be quite different for each technology and each device.&lt;/p&gt;
&lt;p&gt;Three models are common for deploying DRM clients to viewer devices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The DRM client is part of the operating system and/or hardware.&lt;/li&gt;
&lt;li&gt;The DRM client is part of the web browser.&lt;/li&gt;
&lt;li&gt;The DRM client is part of the app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A single DRM technology can exist in multiple forms depending on the target platform. For example, Google Widevine is part of the Android operating system, part of the Chrome, Firefox and Edge browsers, and can be deployed as part of an app on certain other platforms.&lt;/p&gt;
&lt;p&gt;The capabilities available to each type of DRM client implementation are different. A DRM client integrated into the operating system and/or hardware can take advantage of access control mechanisms that are simply not exposed to browsers or apps, while at the same time protecting itself against attack using more powerful means. The measure of how well a DRM client resists attack is termed &lt;strong&gt;robustness&lt;/strong&gt; - using a more robust implementation will convince a content provider to license you more valuable content.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-simplified-view-of-the-basic-drm-interactions&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-01/technical-components_huf24bed8c476530252cf9c76d337d4518_7444_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;555&#34; height=&#34;125&#34;&gt;



  
  
  &lt;figcaption&gt;
    Simplified view of the basic DRM interactions
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;In addition to the DRM client on the viewer&amp;rsquo;s device, another DRM component runs as a backend service accessed over the network. To authorize usage of content, a document called a license is generated by the &lt;strong&gt;DRM server&lt;/strong&gt;. This delivers the keys to unlock content, informs the device-side component how it must protect the content and defines under which conditions the viewer is authorized to access it (e.g. time limit, max display resolution). Each DRM technology produces the license using its own proprietary data format and uses a custom communication protocol to provide it to the device-side component.&lt;/p&gt;
&lt;p&gt;Beyond the interactions relevant to playback, DRM technologies are often also involved in the processing and preparation of the content. The data inside media streams is encrypted to ensure that it cannot be accessed without the cooperation of the DRM client, which is the only element permitted to obtain the key (as part of the license). Furthermore, DRM technology specific activation data is often embedded into the media stream headers to instruct the player on which DRM client to activate and how.&lt;/p&gt;
&lt;p&gt;The management of encryption keys is often also a proprietary solution tied to the DRM server, although its exact forms vary greatly and no single approach has a strong foothold in the DRM ecosystem. Future articles 
&lt;a href=&#34;/categories/drm-is-not-a-black-box/&#34;&gt;in this series&lt;/a&gt; will explore the backend workflows in depth.&lt;/p&gt;
&lt;h1 id=&#34;multi-drm-is-mandatory&#34;&gt;Multi-DRM is mandatory&lt;/h1&gt;
&lt;p&gt;There is no single DRM technology that covers all platforms. For reasons described 
&lt;a href=&#34;../drm-is-not-a-black-box-03/&#34;&gt;in a future article&lt;/a&gt;, a solution operator will often want to use the native DRM technology offered by a platform even if other options exist.&lt;/p&gt;
&lt;p&gt;As a result, a typical solution will need to use multiple DRM technologies, each targeting a specific set of platforms. This is a &lt;strong&gt;multi-DRM&lt;/strong&gt; scenario.&lt;/p&gt;
&lt;p&gt;Different DRM technologies are completely independent from each other and only in recent years did the use of the same content files with different DRM technologies become feasible, due to all major DRM technologies starting to support the same encryption scheme. There are significant differences in the workflows, APIs and architectural patterns used with different DRM technologies. There are even significant and hidden differences in how different devices implement the same DRM technology! And of course, there are different versions of DRM technologies and different implementations of those technologies. It can be a major challenge to understand how exactly multiple DRM technologies can be effectively tied together in a single solution.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-a-typical-multi-drm-scenario-with-only-two-drm-technologies-simplified-scenario---many-drm-interactions-omitted-to-keep-diagram-readable-click-to-zoom&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/drm-is-not-a-black-box-01/multidrm-mess_huc28b2e8caa9f3b5e91843632b7833869_71261_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;A typical multi-DRM scenario with only two DRM technologies. Simplified scenario - many DRM interactions omitted to keep diagram readable. Click to zoom.&#34;&gt;


  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-01/multidrm-mess_huc28b2e8caa9f3b5e91843632b7833869_71261_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1916&#34; height=&#34;471&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A typical multi-DRM scenario with only two DRM technologies. Simplified scenario - many DRM interactions omitted to keep diagram readable. Click to zoom.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Later articles 
&lt;a href=&#34;/categories/drm-is-not-a-black-box/&#34;&gt;in this series&lt;/a&gt; will examine in detail the interactions between different DRM technologies to explain how multi-DRM integration in a solution can be accomplished with minimal hassle.&lt;/p&gt;
&lt;h1 id=&#34;multi-drm-is-unnecessary&#34;&gt;Multi-DRM is unnecessary&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The primary function of a DRM technology is to restrict what the viewer can do with the content.&lt;/strong&gt; Typically, the viewer is authorized to play back the content (often within a time limit) but not to make copies of the content.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it. That&amp;rsquo;s what every DRM technology aims to do. The core function is to restrict the viewer&amp;rsquo;s actions while resisting tampering by a viewer who does not like the imposed restrictions.&lt;/p&gt;
&lt;p&gt;Different DRM technologies largely accomplish this goal in very similar ways, with the differences between the DRM technologies coming down to proprietary protocols, data formats, SDKs and platform integration. &lt;strong&gt;From a solution operator&amp;rsquo;s perspective, there is zero need for multiple DRM technologies to exist.&lt;/strong&gt; The fact that many different DRM technologies exist and continue to be relevant is largely explained by it being a matter of cost on two fronts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Someone once made an investment that first rooted a particular DRM technology on some platform and there was never enough justification to change it, as it worked well enough and switching to alternatives would have caused extra cost.&lt;/li&gt;
&lt;li&gt;It can be cheaper for a platform developer to integrate their own DRM technology than to license and adapt a 3rd party DRM technology. Sure, it might make life more expensive for solution operators by requiring multi-DRM but that is not a cost the platform developer has to pay.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reducing the needless diversity and complexity of competing DRM technologies is in the interest of every solution operator. A platform developer only has to pay the price of DRM integration once but every solution operator has to pay the price of multi-DRM integration for every solution they deploy and every platform they target.&lt;/p&gt;
&lt;p&gt;Unfortunately, solution operators do not have much of a voice in the industry bodies that have leverage over platforms by defining industry standards - typically the companies defining the standards are the same ones that are implementing them, not the ones who have to actually use the result. As such, industry standards are often reduced to standardizing the status quo.&lt;/p&gt;
&lt;h1 id=&#34;coming-up-next&#34;&gt;Coming up next&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;../drm-is-not-a-black-box-02/&#34;&gt;The next article&lt;/a&gt; will explore the technical sturcture of content used with modern DRM technologies and walk you through the steps and DRM interactions required to bring content into this form.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;../../categories/drm-is-not-a-black-box/&#34;&gt;View all articles in the series.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
