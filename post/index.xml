<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Sander Saares</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Sander Saares 2020</copyright><lastBuildDate>Fri, 08 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>DRM is not a black box, part 2: encryption and content</title>
      <link>/post/drm-is-not-a-black-box-02/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/drm-is-not-a-black-box-02/</guid>
      <description>&lt;p&gt;The internet is the birthplace of modern DRM. Even if you deploy an offline solution with local playback, DRM technologies operate with least hassle when your solution uses modern adaptive streaming technologies. A content processing workflow designed for adaptive streaming is a content processing workflow ready for DRM.&lt;/p&gt;
&lt;p&gt;The two media delivery technologies of relevance here are DASH&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and HLS&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. The Apple ecosystem uses HLS, whereas everything else uses DASH. In order to understand encryption, you need to understand how content is structured when using these technologies.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Other lesser known delivery technologies are occasionally used by some vendors. However, these alternative technologies are insignificant in the big picture and their use only leads to vendor lock-in and excessive cost. Use DASH and HLS.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;structure-of-dash-and-hls&#34;&gt;Structure of DASH and HLS&lt;/h1&gt;
&lt;p&gt;Most solutions wish to target viewers on both Apple and non-Apple platforms and therefore need to present all content using both the DASH and HLS delivery technologies. Thankfully this is not as burdensome as it sounds because the two are in fact different flavors of the same thing.&lt;/p&gt;
&lt;p&gt;The link between the two technologies is CMAF&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; (a cousin of the well-known MP4 file format) which defines a common format for media data storage compatible with both DASH and HLS. The latter two technologies define the format of the &lt;strong&gt;manifest&lt;/strong&gt; files that contain instructions for players on how to access the content stored in the shared CMAF media files.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-relationships-between-dash-hls-and-cmaf&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/dash-hls-cmaf_huc0d1bf4dbd1d5fa403595f55ce6350b5_16661_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;405&#34; height=&#34;287&#34;&gt;



  
  
  &lt;figcaption&gt;
    Relationships between DASH, HLS and CMAF
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;DASH manifest files are served to DASH players, which will use the information within to load data from CMAF media files. HLS manifest files are served to HLS players, which will use the information within to load data from CMAF media files. As the bulk of the data is in the shared CMAF files, there is no duplication of storage costs or excessive CDN throughput despite using two different media delivery technologies.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The contents of the HLS and DASH manifest files are quite similar and it is often easy to convert from one to the other. This means that a content processing workflow only capable of working with either DASH or HLS can be easily enhanced by post-processing to produce the other manifest format.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The audio and video data exists in the form of &lt;strong&gt;samples&lt;/strong&gt;, where one sample is one video frame (e.g. 24 samples per second) or a similar duration of audio data. Samples are grouped into self-contained &lt;strong&gt;segments&lt;/strong&gt; of 2-10 second duration, where each segment is independently presentable by players without having to reference data in any other segment. A &lt;strong&gt;CMAF header&lt;/strong&gt; contains the technical parameters required for a decoder to process the data contained in the segments.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-structure-of-cmaf-media-data-storage&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/drm-is-not-a-black-box-02/structure_hud23d80927c2dbf72f5510d55cb4f781d_16601_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Structure of CMAF media data storage&#34;&gt;


  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/structure_hud23d80927c2dbf72f5510d55cb4f781d_16601_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;575&#34; height=&#34;400&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Structure of CMAF media data storage
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Segments may either be stored in separate files or in one giant CMAF track file (effectively just a concatenated series of segments prefixed with the CMAF header). The storage format largely depends on workflow-specific configuration and content processing service compatibility - different services expect the data to exist in different forms.&lt;/p&gt;
&lt;h1 id=&#34;applying-drm-to-movies&#34;&gt;Applying DRM to movies&lt;/h1&gt;
&lt;p&gt;The media samples stored inside the CMAF files are encrypted. DRM technologies rely on encryption to control when and where the media data can be used for playback, creating situations where the decryption key is only provided to authorized DRM clients and only when all the necessary conditions to ensure adequate content protection are met.&lt;/p&gt;
&lt;p&gt;Encryption is performed individually for each sample - it is not the files themselves that are encrypted but only the actual audio/video data within them. Even there, encryption is only partially applied - for video data only 10% of each sample is encrypted, leaving 90% in the clear. As the encryption is applied in a repeating pattern of 1:9 blocks, it is sometimes called &lt;strong&gt;pattern encryption&lt;/strong&gt;. One block is 16 bytes.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-10-pattern-encryption-applied-to-data-in-video-samples&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/pattern-encryption_hu0aaf388355e1e6fea96100781571c40d_4597_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;504&#34; height=&#34;383&#34;&gt;



  
  
  &lt;figcaption&gt;
    10% pattern encryption applied to data in video samples
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The rationale for using pattern encryption is that encrypting 10% of the data is sufficient to make the samples unusable without the key while minimizing the impact of decryption on processor capacity and battery life. Audio samples are fully encrypted due to their relatively small size.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A small prefix of up to 32 bytes in each sample is typically left in the clear to enable sample headers to be processed. This technique of dividing a sample into clear and encrypted regions is called &lt;strong&gt;subsample encryption&lt;/strong&gt;. For encryption algorithm purposes (e.g. where does the 10% pattern start) the clear prefix is considered not to be a part of the sample.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-subsample-encryption-leaves-an-optional-clear-prefix-to-expose-the-sample-headers&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/subsample-encryption_hu0afda73aaeaf539bab2ab42eece5ae8e_2803_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;503&#34; height=&#34;212&#34;&gt;



  
  
  &lt;figcaption&gt;
    Subsample encryption leaves an optional clear prefix to expose the sample headers
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Subsample encryption is typically only used with video tracks and does not need to be configured by the operator - content processing tools that encrypt data already know when a clear prefix is required and will insert it automatically.&lt;/p&gt;
&lt;p&gt;The technical details of encryption are described by the &lt;code&gt;cbcs&lt;/code&gt; protection scheme defined in the Common Encryption&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; standard. You may see material online referencing the &lt;code&gt;cenc&lt;/code&gt; protection scheme but this scheme is effectively becoming obsolete as Apple devices do not support it. Modern devices use &lt;code&gt;cbcs&lt;/code&gt;. In addition to cryptographic differences, the &lt;code&gt;cenc&lt;/code&gt; protection scheme does not use pattern encryption but encrypts the entire sample.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    If your target device set contains devices that do not support the &lt;code&gt;cbcs&lt;/code&gt; protection scheme then you will need to create two copies of every encrypted track - one encrypted with &lt;code&gt;cbcs&lt;/code&gt; (for Apple and newer non-Apple devices) and one with &lt;code&gt;cenc&lt;/code&gt; (for older non-Apple devices).
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After applying encryption the movie is safe for publishing over unprotected channels. You do not need to guard access to the files as the content cannot be accessed without the key. In some high-security scenarios, you might still care about protecting access to the files as part of a defense-in-depth strategy (e.g. by using URL signing to control who can download the files) but on a cryptographic level the sample data is now unusable for an attacker.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    All modern DRM technologies use the same encryption algorithms that are equally strong - there is no difference in the strength of encryption between DRM technologies. However, different DRM client implementations do have different strengths and weaknesses. This will be explored in depth by the next article in this series.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To apply encryption, you need to know the &lt;strong&gt;key&lt;/strong&gt; and the &lt;strong&gt;key ID&lt;/strong&gt; (or &lt;strong&gt;KID&lt;/strong&gt;). The key is a 128-bit symmetric key (i.e. the same key is used for encryption and decryption). The KID is a separate (non-secret) 128-bit value used elsewhere in DRM workflows to reference a specific key. Key management is a large topic of its own, to be covered in a separate article.&lt;/p&gt;
&lt;p&gt;Different data formats are used for representing keys and KIDs, depending on the situation and the specific piece of software. In practice, the KID is typically formatted as a GUID&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; (&lt;code&gt;a0a8db17-20c7-4068-bfbd-f8a68e34f1a5&lt;/code&gt;) and the key as a base64 or hexadecimal string (&lt;code&gt;FSu0UIH8Z06IOyXVlnmc8Q==&lt;/code&gt; or &lt;code&gt;0x152bb45081fc674e883b25d596799cf1&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;GUIDs have multiple different binary representations! The &amp;ldquo;Linux style&amp;rdquo; binary format is acheived by removing the dashes and treating a GUID as a hexadecimal string. The &amp;ldquo;Windows style&amp;rdquo; binary format is achieved in a more complex fashion, with a different order of bytes.&lt;/p&gt;
&lt;p&gt;Media streaming systems typically use the Linux style binary format. This has caused much pain when software platforms assume Windows style and developers only discover that 2 years into production when integrating another system that uses Linux style. In hindsight using GUIDs for KIDs was a mistake but it&amp;rsquo;s too late to go back now.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A different key is used for tracks carry content with different value (e.g. 4K quality is more valuable than SD quality) or different decoder paths (audio versus video). For example, a typical movie might use the following set of keys:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SD video key&lt;/li&gt;
&lt;li&gt;HD video key&lt;/li&gt;
&lt;li&gt;UHD video key&lt;/li&gt;
&lt;li&gt;audio key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After encrypting the samples, the CMAF header and segment header are extended with encryption-relevant information&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;. The DASH and HLS manifest are annotated, at minimum, with the KID of each track. Often, DRM client initialization data is also added to the manifests.&lt;/p&gt;
&lt;h1 id=&#34;embedded-initialization-data&#34;&gt;Embedded initialization data&lt;/h1&gt;
&lt;p&gt;A player needs to provide &lt;strong&gt;initialization data&lt;/strong&gt; to a DRM client in order to activate it. The format of this data is specific to the DRM technology but is typically based on the &lt;code&gt;pssh&lt;/code&gt; format defined by Common Encryption&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;DRM client initialization data is embedded into the DASH and HLS manifests for every DRM technology that the solution integrates with at the time of content processing. The manifest files can be easily extended with more initialization data when additional DRM technologies are integrated into a solution.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Historically, initialization data was embedded into the CMAF header instead of manifest files but this approach is deprecated due to maintenance problems it caused - it is much harder to change the CMAF header if you need to replace or extend the DRM initialization data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is an example of PlayReady and FairPlay initialization data for the same KID, in DASH format for PlayReady and HLS format for FairPlay. PlayReady uses the &lt;code&gt;pssh&lt;/code&gt; format, whereas FairPlay uses a URL-like initialization data format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;ContentProtection value=&amp;quot;MSPR 2.0&amp;quot; schemeIdUri=&amp;quot;urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95&amp;quot;&amp;gt;
  &amp;lt;cenc:pssh&amp;gt;AAAB5HBzc2gAAAAAmgTweZhAQoarkuZb4IhflQAAAcTEAQAAAQABALoBPABXAFIATQBIAEUAQQBEAEUAUgAgAHgAbQBsAG4AcwA9ACIAaAB0AHQAcAA6AC8ALwBzAGMAaABlAG0AYQBzAC4AbQBpAGMAcgBvAHMAbwBmAHQALgBjAG8AbQAvAEQAUgBNAC8AMgAwADAANwAvADAAMwAvAFAAbABhAHkAUgBlAGEAZAB5AEgAZQBhAGQAZQByACIAIAB2AGUAcgBzAGkAbwBuAD0AIgA0AC4AMAAuADAALgAwACIAPgA8AEQAQQBUAEEAPgA8AFAAUgBPAFQARQBDAFQASQBOAEYATwA+ADwASwBFAFkATABFAE4APgAxADYAPAAvAEsARQBZAEwARQBOAD4APABBAEwARwBJAEQAPgBBAEUAUwBDAFQAUgA8AC8AQQBMAEcASQBEAD4APAAvAFAAUgBPAFQARQBDAFQASQBOAEYATwA+ADwASwBJAEQAPgBKAFEAegBJACsAQQA5AHAATgBrAGUAQgBNAGsATQBPAFgARwBtAFUAegBnAD0APQA8AC8ASwBJAEQAPgA8AC8ARABBAFQAQQA+ADwALwBXAFIATQBIAEUAQQBEAEUAUgA+AA==&amp;lt;/cenc:pssh&amp;gt;
&amp;lt;/ContentProtection&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#EXT-X-SESSION-KEY:METHOD=SAMPLE-AES,URI=&amp;quot;skd://f8c80c25-690f-4736-8132-430e5c6994ce:51BB4F1A7E2E835B2993884BD09ADB19&amp;quot;,KEYFORMAT=&amp;quot;com.apple.streamingkeydelivery&amp;quot;,KEYFORMATVERSIONS=&amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initialization data is obviously unique for each DRM technology but also for each key, because it typically contains the KID. Because of this, initialization data can make up a surprisingly large portion of a manifest file.&lt;/p&gt;
&lt;p&gt;It is most common to provide initialization data as part of the configuration for the content packager that performs the encryption. Different packagers accept configuration in different ways (some even use a hybrid push-pull model to retrieve different parts of the configuration in different ways). No matter how the configuration is defined the end result is the same: DRM initialization data is given to the packager by an external system.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-unique-initialization-data-is-associated-with-each-key-and-each-drm-technology&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/initdata-on-packager_hu9fce4d5bd4b1a0b68c37623c02caf6dd_25433_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;664&#34; height=&#34;407&#34;&gt;



  
  
  &lt;figcaption&gt;
    Unique initialization data is associated with each key and each DRM technology
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Some content packagers, however are capable of generating DRM initialization data on their own. This can lead to significant simplification in the backend workflows. You should use this capability whenever possible.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-in-many-cases-the-packager-can-simply-generate-drm-initialization-data-if-it-knows-what-drm-technologies-are-to-be-used&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/initdata-generated-on-packager_hu74e4a2f81fb78a90ec66acb0c5d7d6f1_25118_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;715&#34; height=&#34;531&#34;&gt;



  
  
  &lt;figcaption&gt;
    In many cases, the packager can simply generate DRM initialization data if it knows what DRM technologies are to be used
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h1 id=&#34;initialization-data-is-legacy&#34;&gt;Initialization data is legacy&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Other than to provide initialization data, there is no reason the content processing workflow even needs to know what DRM technologies will be used with the content!&lt;/strong&gt; The requirement to embed this data into the manifests complicates data flows and often does so needlessly. Reducing unnecessary interactions in DRM workflows is a critical part of making it simple to integrate DRM into a solution, so this requirement is best eliminated.&lt;/p&gt;
&lt;p&gt;DRM initialization data is a mechanism for configuring DRM client behavior. It exists because there used to be no APIs that players could use to communicate with a DRM client - any configuration of DRM client behavior had to be done by embedding a DRM technology specific blob into the video itself. Later, this blob moved into the manifest files for easier manipulation. Today, the times have changed and modern DRM clients do offer APIs (e.g. Encrypted Media Extensions&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; and equivalents). As a result, DRM initialization data often contains no information of value. Yet it persists in the APIs and workflows as an artifact of history.&lt;/p&gt;
&lt;p&gt;In principle, providing DRM initialization data in the manifest files is optional - the initialization data could be acquired through other means by the player or even generated on the fly. Unfortunately, few players currently implement DRM client activation without embedded initialization data.&lt;/p&gt;
&lt;p&gt;In short, the initialization data is typically just a DRM technology specific way to represent the KID. &lt;strong&gt;If possible, use players that can generate DRM client initialization data on the fly - by separating DRM technologies from your content pipeline you will achieve a more robust and maintainable solution architecture&lt;/strong&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-player-can-generate-drm-initialization-data-and-greatly-reduce-content-processing-complexity-and-simplify-interactions-in-drm-workflows&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-02/initdata-on-player_huae6841bf243854e3d25956f48bc90a75_15501_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;443&#34; height=&#34;276&#34;&gt;



  
  
  &lt;figcaption&gt;
    The player can generate DRM initialization data and greatly reduce content processing complexity and simplify interactions in DRM workflows
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;DRM client initialization data is specific to each DRM technology and to each key. As such, a unique instance of the initialization data is embedded into the DASH and HLS manifests for each key used to encrypt the movie and for each DRM technology the movie is to be used with. A movie with a typical set of 4 keys, used with 3 DRM technologies, would have 4x3=12 instances of DRM initialization data embedded into it. &lt;strong&gt;By generating initialization data at runtime, you also benefit from minimizing the size of the manifest files, leading to greater efficiency, especially in live scenarios where the manifest must be refreshed periodically.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-encrypted&#34;&gt;What is encrypted?&lt;/h1&gt;
&lt;p&gt;Audio and video tracks are encrypted. Text tracks (subtitles) are not.&lt;/p&gt;
&lt;p&gt;Text tracks are technically equivalent to audio and video tracks but are entirely ignored in this series of articles because in practice they are never encrypted nor protected by DRM.&lt;/p&gt;
&lt;h1 id=&#34;what-requires-configuration&#34;&gt;What requires configuration?&lt;/h1&gt;
&lt;p&gt;It can be confusing to tell the difference between what part of the encryption process is handled automatically by media processing products or services and what must be explicitly configured by an operator.&lt;/p&gt;
&lt;p&gt;There is no straightforward answer as the details depend on the exact products and services used to perform the encryption - if you use very low-level media processing tools you may need to provide low level details, whereas if you use a fully automated publishing pipeline then you might not need to do anything at all.&lt;/p&gt;
&lt;p&gt;Consult with an expert to determine the appropriate setup for your specific situation.&lt;/p&gt;
&lt;h1 id=&#34;coming-up-next&#34;&gt;Coming up next&lt;/h1&gt;
&lt;p&gt;Having encrypted the samples and embedded DRM client initialization data, the content is ready to be served. The next article will take a look at the duties of the DRM client.&lt;/p&gt;
&lt;p&gt;Key management and other DRM-relevant data flows in the content pipeline will be covered in a separate article.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.iso.org/standard/79329.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO/IEC 23009-1:2019 (MPEG-DASH)&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://tools.ietf.org/html/rfc8216&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 8216&lt;/a&gt; and 
&lt;a href=&#34;https://developer.apple.com/streaming/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP Live Streaming (Apple)&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.iso.org/standard/79106.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO/IEC 23000-19:2020 (MPEG-CMAF)&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.iso.org/standard/68042.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO/IEC 23001-7:2016 (Common Encryption)&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://devblogs.microsoft.com/oldnewthing/20190426-00/?p=102450&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How many ways are there to sort GUIDs? How much time do you have?&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://dashif-documents.azurewebsites.net/Guidelines-Security/master/Guidelines-Security.html#CPS-cmaf-structure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DASH-IF Implementation Guidelines: Content Protection and Security (8.1 Content protection data in CMAF containers)&lt;/a&gt; &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.w3.org/TR/encrypted-media/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W3C Encrypted Media Extensions&lt;/a&gt; &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>DRM is not a black box, part 1: why would you use DRM</title>
      <link>/post/drm-is-not-a-black-box-01/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/drm-is-not-a-black-box-01/</guid>
      <description>&lt;p&gt;Apps, websites and services presenting high value video content use DRM technologies to prevent the viewer from making copies of the content. It can be surprising to learn that the website operator is not the one who ultimately benefits from DRM.&lt;/p&gt;
&lt;p&gt;The past twelve years of my work on media streaming projects and products have kept me in close contact with DRM. This is the first 
&lt;a href=&#34;/categories/drm-is-not-a-black-box/&#34;&gt;in a series of articles&lt;/a&gt; that will briefly explain how the DRM ecosystem functions, in the hope that this will help lift a needless veil of secrecy that surrounds the topic. There is no need to work in the shadows when it comes to DRM - the techniques and mechanisms used should be well understood by all stakeholders to ensure that they are put to the best use.&lt;/p&gt;
&lt;h1 id=&#34;content-licensing&#34;&gt;Content licensing&lt;/h1&gt;
&lt;p&gt;A typical company that intends to publish a media streaming solution will first encounter DRM when they try to license some content to offer their viewers. Early in the negotiations, the content provider presents the solution operator with a security questionnaire to fill out. This will include questions both open-ended and highly specific, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is your security model?&lt;/li&gt;
&lt;li&gt;Do you enforce removal of content from viewers whose subscription has lapsed?&lt;/li&gt;
&lt;li&gt;Does your solution detect jailbroken devices? If yes, how?&lt;/li&gt;
&lt;li&gt;What is the maximum video resolution you support for each platform you target?&lt;/li&gt;
&lt;li&gt;Which certificates are used for authenticity verification and who signs them? Does it depend on type of device? If so, how?&lt;/li&gt;
&lt;li&gt;Does yous solution offer protection against malicious system operators making unauthorized copies? If so, how?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Which DRM technologies are used?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There can be as many as 20 pages of questions to answer and forms to fill, the purpose of which is to provide the content provider&amp;rsquo;s security experts the information they need to evaluate the solution&amp;rsquo;s content security capabilities. &lt;strong&gt;The security questionnaire is not a requirements list. A solution does not need to answer &amp;ldquo;yes&amp;rdquo; to every question and to deploy every mechanism listed.&lt;/strong&gt;&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-content-licensing-relationships&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-01/content-licensing_hue99ec5932667dbd61dcd2648619ebbe1_14764_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;592&#34; height=&#34;171&#34;&gt;



  
  
  &lt;figcaption&gt;
    Content licensing relationships
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The level of security provided by the solution is evaluated against the policy defined by the content provider to determine what content can be licensed for use in the solution. A solution that provides better security guarantees will unlock the possibility to license more valuable content.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The term &amp;ldquo;content owner&amp;rdquo; refers to the rights holder. However, most content owners license content directly only to very large customers. This means that in practice content is licensed from an intermediary, often together with post-processing, encoding and/or metadata services, here referred to as content provider.&lt;/p&gt;
&lt;p&gt;The content owner is ultimately the one who decides the policy associated with a title but in many cases the solution builder never interacts directly with them, all daily interactions being with the content provider.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Different titles have different security requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4K resolution superhero movies tend to be the most valuable content - very few solution operators can offer security strong enough to license such content. This requires hardened devices and a supply chain where every link is secure and traceable.&lt;/li&gt;
&lt;li&gt;Early-window content (still playing in cinemas) has fairly high requirements but these can be met by most serious solution operators that have control over the full chain of systems involved in the solution.&lt;/li&gt;
&lt;li&gt;Anything already available of DVD has quite low requirements, as DVDs can be trivially copied.&lt;/li&gt;
&lt;li&gt;Library content (e.g. movies 10 or more years old) has minimal requirements, often being available even without the use of DRM technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the main basis for the decision is the earning potential of the title for the content owner, technical factors can still have an impact. For example, high-value content can be authorized for playback in less than ideal solutions if presented only at low quality levels (SD resolution).&lt;/p&gt;
&lt;h1 id=&#34;the-questions-and-answers-are-not-the-security-model&#34;&gt;The questions and answers are not the security model&lt;/h1&gt;
&lt;p&gt;Ten years ago it was common to see the security questionnaires treated as &amp;ldquo;write-only&amp;rdquo; information in large part - as long as you answered the questions with what sounded like reasonable answers, you got the content. Nowadays, the depth of evaluation has increased and there are actual security experts reviewing the questionnaires in detail. If the text tries to be vague and lacks sufficient depth then additional rounds of inquiry are scheduled and pointed questions are raised to uncover the reasons for the vagueness.&lt;/p&gt;
&lt;p&gt;This means that it is no longer easy to get away with just filling in convincing-sounding individual answers - the solution architect needs to present a complete set of responses that will convince the security expert reading the text that content security is a core part of the solution. The big picture presented by the answers is a significant component in the security expert&amp;rsquo;s evaluation. &lt;strong&gt;Treating the questionnaire as a list of checkboxes to tick will result in less access to content than one would obtain by presenting a thought-out security model that has meaning also outside the security questionnaire.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There can be a vast difference between the architecture and functioning of a solution designed to handle high-value content and of a solution designed without security principles in mind. It can be quite expensive to retrofit security into a solution if the need is only discovered at a late stage when a content provider security review raises painful questions. Content security should be built into a solution from the start.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-role-of-drm&#34;&gt;What is the role of DRM?&lt;/h1&gt;
&lt;p&gt;The content licensing process is where a typical solution architect will first encounter DRM, with the first question being &amp;ldquo;which DRM technology is used&amp;rdquo;. A typical solution operator publishing content made by other parties will not care about DRM for their own benefit - viewers tend to be rule-abiding customers and even if a few individuals make unauthorized copies the business will not be impacted much. However, content owners care deeply about each and every time their content is accessed because a single unauthorized copy is enough to have a large impact across the entire viewership!&lt;/p&gt;
&lt;p&gt;Therefore, the usual thinking with regard to DRM is &amp;ldquo;what will satisfy the content owner&amp;rdquo; and not &amp;ldquo;what do I gain from DRM&amp;rdquo;. &lt;strong&gt;Most solution operators see DRM integration as a tax they have to pay in order to obtain content.&lt;/strong&gt; One of the main goals for this series of articles attempts to reduce the budren of implementing DRM by helping solution architects new to DRM to understand the processes involved.&lt;/p&gt;
&lt;p&gt;Each content owner has a list of DRM technologies they have approved for use with thier content. The most common in use today are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Widevine - available on Android, Chrome, Firefox, Edge and various consumer electronic devices&lt;/li&gt;
&lt;li&gt;Microsoft PlayReady - available on Windows, Edge and many consumer electronic devices&lt;/li&gt;
&lt;li&gt;Apple FairPlay - available on Apple devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three are the core technologies of the DRM ecosystem and are approved for use by all content owners.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The 2019 China-US trade sanctions block Chinese manufacturers from using DRM technologies of US-based companies. As a result, Huawei Wiseplay DRM is likely to become a prominent DRM technology in the near future.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nearly all modern consumer electronic devices include at least one native DRM technology implementation. Devices designed specifically for content playback, such as a smart TV or video-dongle, will typically support both Widevine and PlayReady, plus a few lesser known DRM technologies.&lt;/p&gt;
&lt;p&gt;Beyond the big three, there are several other DRM technologies that are also approved by many content owners but typically they are used less often as they are not natively supported by most devices and software platforms, requiring the use of plugins and specialized player apps.&lt;/p&gt;
&lt;h1 id=&#34;technical-components-of-drm-technologies&#34;&gt;Technical components of DRM technologies&lt;/h1&gt;
&lt;p&gt;Obviously, there is some DRM code that must run on a viewer&amp;rsquo;s device in order to perform the functions expected of a DRM technology - that is, to stop the content from being copied. How this &lt;strong&gt;DRM client&lt;/strong&gt; is delivered and how it integrates with the device&amp;rsquo;s capabilities can be quite different for each technology and each device.&lt;/p&gt;
&lt;p&gt;Three models are common for deploying DRM clients to viewer devices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The DRM client is part of the operating system and/or hardware.&lt;/li&gt;
&lt;li&gt;The DRM client is part of the web browser.&lt;/li&gt;
&lt;li&gt;The DRM client is part of the app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A single DRM technology can exist in multiple forms depending on the target platform. For example, Google Widevine is part of the Android operating system, part of the Chrome, Firefox and Edge browsers, and can be deployed as part of an app on certain other platforms.&lt;/p&gt;
&lt;p&gt;The capabilities available to each type of DRM client implementation are different. A DRM client integrated into the operating system and/or hardware can take advantage of access control mechanisms that are simply not exposed to browsers or apps, while at the same time protecting itself against attack using more powerful means. The measure of how well a DRM client resists attack is termed &lt;strong&gt;robustness&lt;/strong&gt; - using a more robust implementation will convince a content provider to license you more valuable content.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-simplified-view-of-the-basic-drm-interactions&#34;&gt;



  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-01/technical-components_huf24bed8c476530252cf9c76d337d4518_7444_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;555&#34; height=&#34;125&#34;&gt;



  
  
  &lt;figcaption&gt;
    Simplified view of the basic DRM interactions
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;In addition to the DRM client on the viewer&amp;rsquo;s device, another DRM component runs as a backend service accessed over the network. To authorize usage of content, a document called a license is generated by the &lt;strong&gt;DRM server&lt;/strong&gt;. This delivers the keys to unlock content, informs the device-side component how it must protect the content and defines under which conditions the viewer is authorized to access it (e.g. time limit, max display resolution). Each DRM technology produces the license using its own proprietary data format and uses a custom communication protocol to provide it to the device-side component.&lt;/p&gt;
&lt;p&gt;Beyond the interactions relevant to playback, DRM technologies are often also involved in the processing and preparation of the content. The data inside media streams is encrypted to ensure that it cannot be accessed without the cooperation of the DRM client, which is the only element permitted to obtain the key (as part of the license). Furthermore, DRM technology specific activation data is often embedded into the media stream headers to instruct the player on which DRM client to activate and how.&lt;/p&gt;
&lt;p&gt;The management of encryption keys is often also a proprietary solution tied to the DRM server, although its exact forms vary greatly and no single approach has a strong foothold in the DRM ecosystem. Future articles 
&lt;a href=&#34;/categories/drm-is-not-a-black-box/&#34;&gt;in this series&lt;/a&gt; will explore the backend workflows in depth.&lt;/p&gt;
&lt;h1 id=&#34;multi-drm-is-mandatory&#34;&gt;Multi-DRM is mandatory&lt;/h1&gt;
&lt;p&gt;There is no single DRM technology that covers all platforms. For reasons described in future articles, a solution operator will often want to use the native DRM technology offered by a platform even if other options exist.&lt;/p&gt;
&lt;p&gt;As a result, a typical solution will need to use multiple DRM technologies, each targeting a specific set of platforms. This is a &lt;strong&gt;multi-DRM&lt;/strong&gt; scenario.&lt;/p&gt;
&lt;p&gt;Different DRM technologies are completely independent from each other and only in recent years did the use of the same content files with different DRM technologies become feasible, due to all major DRM technologies starting to support the same encryption scheme. There are significant differences in the workflows, APIs and architectural patterns used with different DRM technologies. There are even significant and hidden differences in how different devices implement the same DRM technology! And of course, there are different versions of DRM technologies and different implementations of those technologies. It can be a major challenge to understand how exactly multiple DRM technologies can be effectively tied together in a single solution.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-a-typical-multi-drm-scenario-with-only-two-drm-technologies-simplified-scenario---many-drm-interactions-omitted-to-keep-diagram-readable-click-to-zoom&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/drm-is-not-a-black-box-01/multidrm-mess_huc28b2e8caa9f3b5e91843632b7833869_71261_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;A typical multi-DRM scenario with only two DRM technologies. Simplified scenario - many DRM interactions omitted to keep diagram readable. Click to zoom.&#34;&gt;


  &lt;img data-src=&#34;/post/drm-is-not-a-black-box-01/multidrm-mess_huc28b2e8caa9f3b5e91843632b7833869_71261_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1916&#34; height=&#34;471&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A typical multi-DRM scenario with only two DRM technologies. Simplified scenario - many DRM interactions omitted to keep diagram readable. Click to zoom.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Later articles 
&lt;a href=&#34;/categories/drm-is-not-a-black-box/&#34;&gt;in this series&lt;/a&gt; will examine in detail the interactions between different DRM technologies to explain how multi-DRM integration in a solution can be accomplished with minimal hassle.&lt;/p&gt;
&lt;h1 id=&#34;multi-drm-is-unnecessary&#34;&gt;Multi-DRM is unnecessary&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The primary function of a DRM technology is to restrict what the viewer can do with the content.&lt;/strong&gt; Typically, the viewer is authorized to play back the content (often within a time limit) but not to make copies of the content.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it. That&amp;rsquo;s what every DRM technology aims to do. The core function is to restrict the viewer&amp;rsquo;s actions while resisting tampering by a viewer who does not like the imposed restrictions.&lt;/p&gt;
&lt;p&gt;Different DRM technologies largely accomplish this goal in very similar ways, with the differences between the DRM technologies coming down to proprietary protocols, data formats, SDKs and platform integration. &lt;strong&gt;From a solution operator&amp;rsquo;s perspective, there is zero need for multiple DRM technologies to exist.&lt;/strong&gt; The fact that many different DRM technologies exist and continue to be relevant is largely explained by it being a matter of cost on two fronts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Someone once made an investment that first rooted a particular DRM technology on some platform and there was never enough justification to change it, as it worked well enough and switching to alternatives would have caused extra cost.&lt;/li&gt;
&lt;li&gt;It can be cheaper for a platform developer to integrate their own DRM technology than to license and adapt a 3rd party DRM technology. Sure, it might make life more expensive for solution operators by requiring multi-DRM but that is not a cost the platform developer has to pay.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reducing the needless diversity and complexity of competing DRM technologies is in the interest of every solution operator. A platform developer only has to pay the price of DRM integration once but every solution operator has to pay the price of multi-DRM integration for every solution they deploy and every platform they target.&lt;/p&gt;
&lt;p&gt;Unfortunately, solution operators do not have much of a voice in the industry bodies that have leverage over platforms by defining industry standards - typically the companies defining the standards are the same ones that are implementing them, not the ones who have to actually use the result. As such, industry standards are often reduced to standardizing the status quo.&lt;/p&gt;
&lt;h1 id=&#34;coming-up-next&#34;&gt;Coming up next&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;../drm-is-not-a-black-box-02/&#34;&gt;The next article&lt;/a&gt; will explore the technical sturcture of content used with modern DRM technologies and walk you through the steps and DRM interactions required to bring content into this form.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DRM in HTML: what EME has and has not done for us</title>
      <link>/post/drm-in-html/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      <guid>/post/drm-in-html/</guid>
      <description>&lt;p&gt;The World Wide Web Consortium has recently made a decision to publish Encrypted Media Extensions (EME) as a web standard. 
&lt;a href=&#34;https://arstechnica.com/information-technology/2017/07/over-many-objections-w3c-approves-drm-for-html5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This has drawn criticism from many directions&lt;/a&gt; because EME standardizes a mechanism that is highly opaque to users, has the potential to jeopardize their privacy and brings considerable legal risk to any researchers that try to study it.&lt;/p&gt;
&lt;p&gt;Despite this, EME is a step up in interoperability and has incorporated basic privacy-oriented features that were lacking in pre-EME technologies. To better understand what EME truly brings to users, one needs to understand not only what it is but also where it comes from and what future directions it and related technologies may take.&lt;/p&gt;
&lt;h1 id=&#34;what-exactly-are-drm-and-eme&#34;&gt;What exactly are DRM and EME?&lt;/h1&gt;
&lt;p&gt;Studios that license premium content require video solutions to use Digital Rights Management systems (DRM) that enforce strict control over what users can do with the content. Premium content is delivered to users in encrypted form, ensuring that even if the data is intercepted and copied, it cannot be played back without the required key. Each player must cooperate with a DRM systemâââa component of the userâs deviceâââthat is tasked with obtaining and protecting this key and ensuring that the decrypted content can only be displayed for immediate viewing and not copied.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-eme-defines-an-api-and-various-data-structures-often-used-merely-to-wrap-drm-system-specific-data&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/post/drm-in-html/EME%20-%20API_hu79037f0a1cdaf64a45e04bae3ad664ab_7251_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;EME defines an API and various data structures, often used merely to wrap DRM system specific data.&#34;&gt;


  &lt;img data-src=&#34;/post/drm-in-html/EME%20-%20API_hu79037f0a1cdaf64a45e04bae3ad664ab_7251_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;422&#34; height=&#34;344&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    EME defines an API and various data structures, often used merely to wrap DRM system specific data.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;
&lt;a href=&#34;https://www.w3.org/TR/encrypted-media/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EME is an API that defines standard functions and data structures&lt;/a&gt; that can be called form JavaScript in order to activate the DRM system used by the browser and to supply it with data. It does not standardize how DRM systems protect content or keys, or even how they obtain those keys and allow them to be used. Most of the actual messaging involved remains DRM system specific and is simply wrapped by EME data structures. EME provides an on-switch and a feedback mechanism to allow the DRM system to inform the web page about the presence or absence of keys.
DRM in the world before EME&lt;/p&gt;
&lt;p&gt;The concept of DRM has been around for decades, gaining significant uptake in the 80s and 90s in cable and satellite television and then spreading to personal devices like the iPod and Zune. It is from here that it made the leap to the web browser when Microsoft published the Silverlight 2.0 plugin in 2008, 
&lt;a href=&#34;https://msdn.microsoft.com/fr-fr/library/cc838192%28v=vs.95%29.aspx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;taking Zuneâs PlayReady DRM technology along for the ride&lt;/a&gt;. Silverlight was promoted heavily and reached an installed base of around 70% in a few years.&lt;/p&gt;
&lt;p&gt;As Silverlight was available not only for Internet Explorer but also for other browsers and even on Mac OS, it presented a very attractive target for solution developers who wanted to offer their customers the ability to play back premium content. Companies like Netflix were quick to take advantage of this capability. Suddenly, even small independent solutions could ensure that playback was protected and thereby license content from serious movie studios.&lt;/p&gt;
&lt;p&gt;Other companies quickly piled on to take a bite of this fast developing market opened by Microsoft, with Flash integrating DRM support and various other vendors offering their own browser plugins for DRM-enabled playback. Their approaches to business were quite different and video playback technologies were at the same time evolving in other ways that lead to a slow uptake of alternative DRM systems, causing Microsoft to come out more or less on top of the browser DRM game. Still, the era of browser plugins was ending and Silverlight usage quickly declined as HTML 5 made the web more unified and presented a convenient alternative to plugin-based rich web app development. Yet for a long time there was no serious alternative for DRM and video playback remained a plugin-driven activity far into the HTML 5 age.&lt;/p&gt;
&lt;p&gt;In hindsight, we can say that browser plugins were a particularly buggy phenomenonâââthink of 
&lt;a href=&#34;https://www.cvedetails.com/vulnerability-list/vendor_id-53/product_id-6761/Adobe-Flash-Player.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the endless security vulnerabilities of Flash&lt;/a&gt;. The concept of regularly updating browser plugins never really reached the majority of users who as a result were often using outdated software. Furthermore, plugins were completely opaque to the usersâââa plugin was a black box, providing whatever functionality its authors decided to include. There was nobody advocating for the rights of users in this arrangementâââyou had to click the install button and accept whatever came or you had to move on and not consume content on your desired website.&lt;/p&gt;
&lt;p&gt;The system worked despite its flaws and it was the best that the industry could provide in its day. However, plugins endangered usersâ computers and caused frustration for solution developers who had to not only convince users to install buggy plugins but then also had to support those users when they inevitably ran into issues. As competing DRM technology stacks were completely incompatible with each other and no single one covered all platforms and device types, ambitious solution developers often had to set up multiple parallel content delivery flows to serve a wide range of platforms, making it expensive to offer premium content to a wide range of users.&lt;/p&gt;
&lt;h1 id=&#34;how-eme-was-born&#34;&gt;How EME was born&lt;/h1&gt;
&lt;p&gt;In the early 2010âs it quickly became apparent to many in the industry that with the decline of browser plugins an alternative was needed to ensure that premium content could still be provided to users. If there is no plugin the only thing left is the browser. Yet before tackling the hard topic of DRM, another needed attention. Not only were the browser plugins responsible for DRM but also the actual playback of content, using modern adaptive streaming technologies that could adjust the playback experience according to the the userâs internet connection capabilities. This could not be done by the browsers, which were only capable of playing back simple MP4 files, if that.&lt;/p&gt;
&lt;p&gt;The first technology to be standardized was Media Source Extensions which defined 
&lt;a href=&#34;https://www.w3.org/TR/media-source/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a mechanism for the web page to directly feed content to the browserâs media engine&lt;/a&gt;. The browser took on the complexity of decoding and rendering media and of making use of the deviceâs hardware acceleration features, none of which could be feasibly done by the JavaScript code running in a web page. This was largely uncontroversial and opened the door to begin standardization of DRM related features along similar lines.&lt;/p&gt;
&lt;p&gt;As work on Encrypted Media Extensions started it quickly became apparent to many observers that not all participants really understood DRM. This caused significant friction and never truly went away, with different parties approaching the topic from very different viewpoints and some harboring rather unfortunate misunderstandings of what exactly was being worked on. User privacy has been a topic raised time and time again, yet companies implementing EME are often happy with the status quo as they have a conflict of interest in maintaining their DRM technologies that often rely on obfuscation and secrecy to provide security. Firefox developers have stood out at times by speaking up about the rights of users in the W3C working group. Unfortunately, the very same Firefox developers have often been relatively uninformed about the DRM market, making their efforts ineffective.&lt;/p&gt;
&lt;p&gt;Web standards are usually developed in parallel with implementations and EME was no different. Two major browser manufacturersâââMicrosoft and Googleâââeach had their own DRM technology and they were eager to get it on the market in a widely usable form. While discussions were ongoing, their browsers implemented what seemed to be the most sensible opinion of the day and sometimes created custom API extensions where there was no EME-provided solution. There came a point in the EME standardization process where the two major browser families had working DRM implementations accessible by EME with the core features implemented in a way essentially compatible with EME. Motivation to continue the standardization quickly declined and for a long time around 2015â2016 EME standardization became something of a purely theoretical exercise, with implementations already in active use in forms resembling various drafts of EME.&lt;/p&gt;
&lt;p&gt;Things never really changed after thatâââthe more advanced features were dropped from EME due to lack of implementations (required for standardization). Browser authors did not see the point in implementing more EME features as solution developers appeared quite happy to make do with what was already there. In the final stretch of standardization, there has been a slow trickle of convergence but the possibility for EME to drive browser feature development in the field of DRM is largely gone. I suspect this is one of the main reasons why W3C is going ahead with standardizationâââEME in practice has been a done deal for a year or two already. It is in widespread use and blocking standardization will not get rid of EME or change what browsers do. In many ways, EME survives at the mercy of browsers, not the other way around.&lt;/p&gt;
&lt;h1 id=&#34;opening-the-market-for-competition&#34;&gt;Opening the market for competition&lt;/h1&gt;
&lt;p&gt;Behind the scenes, Netflix was the major driving force that motivated platform developers to incorporate readily available media technologies into their browsers and consumer devices. The wave of standardization was largely driven by their massive success in online video. The content pielineâââprocessing, delivery, playback and protectionâââhas always been a massive cost center for solution developers and the lack of standardization often forced companies (that could afford it) to maintain multiple parallel workflows to serve different platforms utilizing different technologies. Platforms that supported standard mechanisms could get a Netflix presence very easily, thereby motivating smaller platforms by enabling them to offer familiar services to users and larger platforms by creating competition.&lt;/p&gt;
&lt;p&gt;While some browsers are created by companies who are also DRM technology developers, others are not. One thing that EME standardizes is the ability for the web page to choose a DRM system from multiple options presented by the browser. This enabled Firefox to create some welcome competition in the DRM market, dominated by software giants Microsoft and Google, when Firefox chose to integrate Adobeâs DRM technology. As it turned out, Adobe never succeeded with DRM due to their sales approach that consisted of only going for the largest customers. A few years down the line, Google stepped in to integrate their Widevine DRM technology into Firefox, as an option more accessible to solution developers. Thus the availability of premium content for Firefox users was greatly increased, enabling the browser to remain competitive. At the same time, choices in DRM systems were again reduced by the lack of Adobeâs commercial success in the field of DRM.&lt;/p&gt;
&lt;p&gt;Some platforms such as 
&lt;a href=&#34;https://developers.google.com/cast/docs/media#delivery-methods-and-adaptive-streaming-protocols&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chromecast and many Android devices incorporate multiple DRM technologies out of the box&lt;/a&gt; and expose them using EME or 
&lt;a href=&#34;https://developer.android.com/reference/android/drm/package-summary.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an equivalent non-browser technology&lt;/a&gt;, enabling not only competition between browsers and platforms but also between different DRM technology providers. Five years ago, each DRM technology provider took a royalty payment whenever their technology was used to deliver a decryption key. Today, all major DRM technologies are royalty-free in this regardâââlargely due to the competition encouraged by the wide uptake EME.&lt;/p&gt;
&lt;h1 id=&#34;future-opportunities&#34;&gt;Future opportunities&lt;/h1&gt;
&lt;p&gt;DRM systems remain opaque to usersâââwhile EME standardizes the mechanism of activating them, it does not affect what DRM systems actually do. Users have little to no control or visibility over the information collected by DRM systems or the rights that are assigned to them. DRM remains a boolean factor that simply determines whether a video plays back or does not. Any information exposed to the user comes from the website they use, which often says nothing about DRM. Indeed, the user may not even be aware that there is a component in his device that is actively working to protect data from the deviceâs owner.&lt;/p&gt;
&lt;p&gt;Increased competition in the field of DRM system development is the best hope for achieving more results in this area. If users are able to select the DRM technologies they wish to use, competition may force DRM system authors to accept privacy-oriented standardization. EME opens the door for choice between DRM technologies, though few platforms actually enable a choice to be made as most only implement a single DRM technology.&lt;/p&gt;
&lt;p&gt;Even when there is a choice of DRM technologies, the decision is made by the solution developer, based on what technology is preferred by them. This is largely driven by technological needsâââremember that EME only standardizes the mechanism of DRM system activation. There is nothing even remotely standardized about key management workflows and digital rights policy application. These are closely guarded secrets of DRM technology authors. While differentiation between DRM systems cannot and should not be avoidedâââit is the differences in technologies that drive competition, after allâââthis secrecy about the related proprietary formats for key delivery and policy control is mostly meaningless and simply driven by inertia and lack of a reason to do it any different. 99% of the currently-secret communication protocols and formats could be opened for standardization without and loss of security in terms of content protection.&lt;/p&gt;
&lt;p&gt;It is here that the needs of solution developers overlap with the needs of usersâââfor developers, having to work with different DRM technologies causes needless duplication. Many companies with DRM experience create their own generic abstractions over DRM technologies that enable their solutions to work with them all using a single unified interface. From here, there is only a short leap toward true standardization of DRM protocols. This topic has been raised both in W3C and in private industry forums several times but in every instance the drive to act dissipates as it quickly becomes clear to us that nobody with enough pull in the industry (i.e. the DRM technology providers) would actually implement any of it.&lt;/p&gt;
&lt;p&gt;A lack of motivation to implement standards is the major factor we need to overcome if we are to open up DRM for the world. Competition is what forces companies to act and EME has done a good job of bringing a small bit of competition to the web by enabling different parties to make use of DRM with reduced development effort. It is by increasing this competition in new ways that we can drive further actions. Writing standards motivated by noble goals of interoperability or the protection of user rights is not enoughâââcompanies need to to put their money behind implementing the standards and that will only happen if they have something to gain from it. In the end, DRM is a mechanism that enables solution providers to attract more users by enabling premium content playback and this is the lever that can move the industry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Closing in on a common media application format</title>
      <link>/post/converging-on-cmaf/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      <guid>/post/converging-on-cmaf/</guid>
      <description>&lt;p&gt;Apple announced today the 
&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016/504/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;support for fragmented MP4 segments in HTTP Live Streaming (HLS)&lt;/a&gt;, taking the first step in bringing together the two competing adaptive streaming universes that exist today: HLS and DASH. The former is the premier media delivery technology on Apple products while the latter is implemented on all other modern platforms.&lt;/p&gt;
&lt;p&gt;There are two main differences between the two, which has meant that creating two different variants of every piece of content has been unavoidable in order to serve both Apple and non-Apple players. The key aspects are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The media segment format â which until today had been MPEG-TS for HLS and MP4 for DASH&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;The encryption scheme â AES-CBC for HLS and AES-CTR for DASH.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Today&amp;rsquo;s move by Apple eliminates the first difference, enabling the same segment format to be used for both DASH and HLS content. To present content without encryption in both adaptive streaming universes can now be accomplished by simply generating two kinds of manifest files for the exact same media segment files! This provides great savings in disk space, media processing complexity and delivery architecture.&lt;/p&gt;
&lt;p&gt;What still remains is the obstacle of differing encryption formats. While both HLS-with-MP4 and DASH use Common Encryption, this is merely an umbrella term for multiple different and incompatible encryption schemes. The day when encrypted content can be shared between HLS and DASH remains in the future.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;While Apple contributed to DASH in its early days, this ended up merely leading to the creation of two &amp;ldquo;flavors&amp;rdquo; of DASH â one of which was very Apple-specific and not used by anyone for anything much. When people today speak of DASH they speak of the other, MP4-based variant of DASH. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
